---
import BaseLayout from "./BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { CAMPAIGN_DATE } from "../consts";

interface Props {
  entry: CollectionEntry<"timekeeping">;
}

const { entry } = Astro.props;
const { Content } = await render(entry);
const data = entry.data;

// Generate breadcrumb path
const typeName =
  {
    "calendar-system": "Calendar Systems",
    holiday: "Holidays",
    month: "Months",
    season: "Seasons",
    "celestial-body": "Celestial Bodies",
    celestial: "Celestial Bodies",
    moon: "Celestial Bodies",
    "time-period": "Time Periods",
    "historical-era": "Historical Eras",
    "dating-system": "Dating Systems",
    seasonal: "Holidays",
  }[data.type] || data.type;

const title = data.title || data.name || entry.id;

// Type-specific badge colors
const typeColors = {
  "calendar-system":
    "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
  holiday:
    "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  month: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  season:
    "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
  "celestial-body":
    "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300",
  celestial:
    "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300",
  moon: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300",
  "time-period":
    "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300",
  "historical-era":
    "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  "dating-system":
    "bg-teal-100 text-teal-800 dark:bg-teal-900/30 dark:text-teal-300",
  seasonal:
    "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
};

const badgeColor =
  typeColors[data.type as keyof typeof typeColors] ||
  "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300";
---

<BaseLayout
  title={`${title} - ${typeName}`}
  description={data.description ||
    `Learn about ${title} in the campaign world's timekeeping system`}
>
  <div class="timekeeping-content max-w-4xl mx-auto px-4 py-8">
    <!-- Breadcrumb Navigation -->
    <nav class="breadcrumb mb-8 text-sm">
      <ol class="flex items-center space-x-2 text-gray-500 dark:text-gray-400">
        <li>
          <a href="/" class="hover:text-blue-600 dark:hover:text-blue-400"
            >Home</a
          >
        </li>
        <li>‚Üí</li>
        <li>
          <a
            href="/calendar"
            class="hover:text-blue-600 dark:hover:text-blue-400">Calendar</a
          >
        </li>
        <li>‚Üí</li>
        <li>
          <a
            href="/timekeeping"
            class="hover:text-blue-600 dark:hover:text-blue-400">Timekeeping</a
          >
        </li>
        <li>‚Üí</li>
        <li>
          <span class="hover:text-blue-600 dark:hover:text-blue-400"
            >{typeName}</span
          >
        </li>
        <li>‚Üí</li>
        <li class="text-gray-900 dark:text-gray-100 font-medium">{title}</li>
      </ol>
    </nav>

    <!-- Content Header -->
    <header class="content-header mb-8">
      <div class="flex items-start justify-between mb-4">
        <h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100">
          {title}
        </h1>

        <!-- Content Type Badge -->
        <span
          class={`px-3 py-1 rounded-full text-sm font-medium ${badgeColor}`}
        >
          {typeName.slice(0, -1)}
          {/* Remove 's' from plural */}
        </span>
      </div>

      {
        data.description && (
          <p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
            {data.description}
          </p>
        )
      }

      <!-- Quick Info Panel -->
      {
        (data.type === "month" ||
          data.type === "holiday" ||
          data.type === "season" ||
          data.type === "celestial-body" ||
          data.type === "celestial" ||
          data.type === "moon" ||
          data.type === "seasonal") && (
          <div class="quick-info bg-gray-50 dark:bg-gray-900 rounded-lg p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
            {data.type === "month" && (
              <>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">
                    Month Number:
                  </span>
                  <span class="text-gray-900 dark:text-gray-100 ml-2">
                    {data.monthNumber}
                  </span>
                </div>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">
                    Season:
                  </span>
                  <span class="text-gray-900 dark:text-gray-100 ml-2 capitalize">
                    {data.season}
                  </span>
                </div>
                <div>
                  <span class="font-medium text-gray-700 dark:text-gray-300">
                    Days:
                  </span>
                  <span class="text-gray-900 dark:text-gray-100 ml-2">
                    {data.days}
                  </span>
                </div>
                {data.commonName && (
                  <div class="md:col-span-2 lg:col-span-3">
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Common Name:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2">
                      {data.commonName}
                    </span>
                  </div>
                )}
              </>
            )}

            {(data.type === "holiday" || data.type === "seasonal") && (
              <>
                {data.observance && (
                  <div>
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Observance:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2 capitalize">
                      {data.observance}
                    </span>
                  </div>
                )}
                {data.duration && (
                  <div>
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Duration:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2">
                      {data.duration} day{data.duration > 1 ? "s" : ""}
                    </span>
                  </div>
                )}
                {data.date && (
                  <div>
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Date:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2">
                      {typeof data.date === "string"
                        ? data.date
                        : typeof data.date === "object" &&
                            data.date.month &&
                            data.date.day
                          ? `${data.date.month}/${data.date.day}`
                          : typeof data.date === "object" &&
                              data.date.specialDay
                            ? data.date.specialDay
                            : "Variable"}
                    </span>
                  </div>
                )}
              </>
            )}

            {(data.type === "celestial-body" ||
              data.type === "celestial" ||
              data.type === "moon") && (
              <>
                {data.celestialType && (
                  <div>
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Type:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2 capitalize">
                      {data.celestialType}
                    </span>
                  </div>
                )}
                {data.cycle && (
                  <div>
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Cycle:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2">
                      {data.cycle.period} days
                    </span>
                  </div>
                )}
                {data.appearance && (
                  <div class="md:col-span-2 lg:col-span-3">
                    <span class="font-medium text-gray-700 dark:text-gray-300">
                      Appearance:
                    </span>
                    <span class="text-gray-900 dark:text-gray-100 ml-2">
                      {data.appearance}
                    </span>
                  </div>
                )}
              </>
            )}
          </div>
        )
      }
    </header>

    <!-- Main Content -->
    <article class="prose prose-lg dark:prose-invert max-w-none">
      <Content />
    </article>

    <!-- Current Campaign Status (if relevant) -->
    {
      data.type === "month" && data.monthNumber === CAMPAIGN_DATE.month && (
        <aside class="campaign-status mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <h3 class="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-2">
            üìÖ Current Campaign Status
          </h3>
          <p class="text-blue-700 dark:text-blue-300">
            This is the current month in the campaign! The party is currently on
            day {CAMPAIGN_DATE.day} of {title}.
          </p>
        </aside>
      )
    }

    <!-- Related Content -->
    {
      data.tags && data.tags.length > 0 && (
        <aside class="related-content mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
            üè∑Ô∏è Related Topics
          </h3>
          <div class="flex flex-wrap gap-2">
            {data.tags.map((tag) => (
              <span class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
        </aside>
      )
    }

    <!-- Navigation -->
    <nav
      class="content-navigation mt-12 pt-8 border-t border-gray-200 dark:border-gray-700"
    >
      <div class="flex justify-between items-center">
        <a
          href="/timekeeping"
          class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors"
        >
          ‚Üê Back to Timekeeping
        </a>
        <a
          href="/calendar"
          class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 transition-colors"
        >
          üìÖ View Calendar ‚Üí
        </a>
      </div>
    </nav>
  </div>
</BaseLayout>

<style>
  .prose {
    color: inherit;
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    color: inherit;
  }

  .prose strong {
    color: inherit;
  }

  .prose a {
    color: rgb(37 99 235);
    text-decoration: underline;
  }

  .dark .prose a {
    color: rgb(96 165 250);
  }

  .prose a:hover {
    color: rgb(29 78 216);
  }

  .dark .prose a:hover {
    color: rgb(147 197 253);
  }
</style>
