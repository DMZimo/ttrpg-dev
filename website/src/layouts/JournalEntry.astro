---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "./BaseLayout.astro";
import FormattedDate from "@/components/layout/FormattedDate.astro";
import HoloCard from "@/components/ui/HoloCard.astro";
import { Image } from "astro:assets";

type Props = CollectionEntry<"journal">["data"];

const {
  session_title,
  session_number,
  session_start,
  characters_involved,
  npcs_encountered,
  previous_session,
  next_session,
  tags,
  cover_image,
  publish_date_iso,
} = Astro.props;

// Use session_title if available, otherwise generate from session_number
const displayTitle = session_title || `Session ${session_number || ""}`;
const displayDate = session_start || publish_date_iso;

// Extract additional props for expanded metadata
const {
  primary_location,
  locations_visited,
  combat_encounters,
  group_rewards,
  level_ups,
} = Astro.props;
---

<BaseLayout
  title={displayTitle}
  description={session_title || `Session ${session_number || ""} - TTRPG Journal`}
  image={cover_image}
  class="max-w-none"
>
  <article class="py-6">
    {
      cover_image && (
        <div class="hero-image mb-6 w-full">
          <HoloCard
            backgroundImage={cover_image.src}
            backgroundOpacity={0.7}
            class="relative overflow-hidden w-full"
          >
            <div class="relative h-64 md:h-80">
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
              
              <!-- Header content overlay -->
              <div class="absolute inset-0 flex flex-col justify-end p-4 md:p-6">
                <header class="text-center text-white">
                  {
                    session_number && (
                      <div class="session-number text-xs font-bold text-white mb-1 px-2 py-0.5 bg-black/40 backdrop-blur-sm rounded-full inline-block border border-white/20">
                        Session {session_number}
                      </div>
                    )
                  }
                  <h1 class="title text-2xl md:text-4xl font-bold text-white mb-3 leading-tight drop-shadow-lg">
                    {displayTitle}
                  </h1>
                  <div class="flex items-center justify-center gap-4 text-sm text-white/90 mb-3">
                    {
                      displayDate && (
                        <div class="date drop-shadow">
                          <FormattedDate date={displayDate} />
                        </div>
                      )
                    }
                  </div>
                  
                  <!-- Session Metadata Overlay -->
                  {
                    (characters_involved || npcs_encountered || tags || locations_visited || combat_encounters) && (
                      <div class="session-metadata bg-black/30 backdrop-blur-sm rounded-lg p-3 mt-3 not-prose border border-white/20">
                        <div class="space-y-2 text-xs">
                          
                          <!-- First Row: Characters, NPCs, and Location -->
                          <div class="flex flex-wrap items-start gap-4">
                            {characters_involved && characters_involved.length > 0 && (
                              <div class="characters flex items-center gap-1">
                                <span class="text-sm">üë•</span>
                                <div class="flex flex-wrap items-center gap-1">
                                  {characters_involved.map((character: any, index: number) => (
                                    <span class="text-white/90">
                                      {typeof character === "string" ? (
                                        character.replace(/\[\[|\]\]/g, "")
                                      ) : (
                                        <a
                                          href={
                                            character.link ||
                                            `/characters/${character.name.toLowerCase().replace(/\s+/g, "-")}`
                                          }
                                          class="text-accent-300 hover:text-accent-100 hover:underline transition-colors"
                                        >
                                          {character.name}
                                        </a>
                                      )}
                                      {index < characters_involved.length - 1 && <span class="text-white/60">,</span>}
                                    </span>
                                  ))}
                                </div>
                              </div>
                            )}

                            {primary_location && (
                              <div class="location flex items-center gap-1">
                                <span class="text-sm">üìç</span>
                                <span class="text-white/90">{primary_location}</span>
                              </div>
                            )}
                          </div>

                          <!-- Second Row: NPCs -->
                          {npcs_encountered && npcs_encountered.length > 0 && (
                            <div class="npcs flex items-center gap-1">
                              <span class="text-sm">üèòÔ∏è</span>
                              <div class="flex flex-wrap items-center gap-1">
                                {npcs_encountered.map((npc: any, index: number) => (
                                  <span class="text-white/90">
                                    {typeof npc === "string" ? (
                                      npc.replace(/\[\[|\]\]/g, "")
                                    ) : (
                                      <a
                                        href={
                                          npc.link ||
                                          `/npcs/${npc.name.toLowerCase().replace(/\s+/g, "-")}`
                                        }
                                        class="text-gold-300 hover:text-gold-100 hover:underline transition-colors"
                                      >
                                        {npc.name}
                                      </a>
                                    )}
                                    {index < npcs_encountered.length - 1 && <span class="text-white/60">,</span>}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}

                          <!-- Third Row: Combat and Level Ups -->
                          <div class="flex flex-wrap items-start gap-4">
                            {combat_encounters && combat_encounters.length > 0 && (
                              <div class="combat flex items-center gap-1">
                                <span class="text-sm">‚öîÔ∏è</span>
                                <span class="text-white/90">{combat_encounters.length} combat{combat_encounters.length > 1 ? 's' : ''}</span>
                              </div>
                            )}

                            {level_ups && level_ups.length > 0 && (
                              <div class="level-up flex items-center gap-1">
                                <span class="text-sm">üìà</span>
                                <span class="text-accent-300">Level Up!</span>
                              </div>
                            )}

                            {group_rewards && group_rewards.length > 0 && (
                              <div class="loot flex items-center gap-1">
                                <span class="text-sm">üí∞</span>
                                <span class="text-gold-300">Treasure Found</span>
                              </div>
                            )}
                          </div>

                          <!-- Fourth Row: Tags -->
                          {tags && tags.length > 0 && (
                            <div class="tags flex items-center gap-1">
                              <span class="text-sm">üè∑Ô∏è</span>
                              <div class="flex flex-wrap gap-1">
                                {tags.map((tag: string) => (
                                  <span class="tag px-1.5 py-0.5 text-xs font-medium rounded border border-white/30 bg-white/10 text-white/90">
                                    {tag}
                                  </span>
                                ))}
                              </div>
                            </div>
                          )}

                        </div>
                      </div>
                    )
                  }
                </header>
              </div>
            </div>
          </HoloCard>
        </div>
      )
    }

    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Floating Table of Contents -->
      <div id="toc-container" class="fixed left-4 top-1/2 transform -translate-y-1/2 z-10 hidden xl:block">
        <div class="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-4 max-w-xs">
          <h4 class="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-3">Contents</h4>
          <nav id="toc-nav" class="space-y-1">
            <!-- TOC will be populated by JavaScript -->
          </nav>
        </div>
      </div>

      <!-- Expandable metadata card -->
      {
        (characters_involved || npcs_encountered || combat_encounters) && (
          <div class="mb-8">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
              <button
                id="metadata-toggle"
                class="w-full px-6 py-4 text-left flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Session Details
                </h3>
                <svg id="metadata-chevron" class="w-5 h-5 text-gray-400 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              <div id="metadata-content" class="px-6 pb-6" style="display: none;">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  
                  {/* Characters */}
                  {characters_involved && characters_involved.length > 0 && (
                    <div class="space-y-3">
                      <h4 class="font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                        <span class="text-lg">üë•</span>
                        Characters
                      </h4>
                      <div class="space-y-2">
                        {characters_involved.map((character: any) => (
                          <div class="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div>
                              {typeof character === "string" ? (
                                <span class="font-medium text-gray-900 dark:text-gray-100">
                                  {character.replace(/\[\[|\]\]/g, "")}
                                </span>
                              ) : (
                                <a
                                  href={character.link || `/characters/${character.name.toLowerCase().replace(/\s+/g, "-")}`}
                                  class="font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                                >
                                  {character.name}
                                </a>
                              )}
                              <div class="text-xs text-gray-500 dark:text-gray-400">
                                Status: {typeof character === "object" ? character.status : "Active"}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* NPCs */}
                  {npcs_encountered && npcs_encountered.length > 0 && (
                    <div class="space-y-3">
                      <h4 class="font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                        <span class="text-lg">üèòÔ∏è</span>
                        NPCs Encountered
                      </h4>
                      <div class="space-y-2">
                        {npcs_encountered.map((npc: any) => (
                          <div class="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            {typeof npc === "string" ? (
                              <span class="font-medium text-gray-900 dark:text-gray-100">
                                {npc.replace(/\[\[|\]\]/g, "")}
                              </span>
                            ) : (
                              <div>
                                <a
                                  href={npc.link || `/npcs/${npc.name.toLowerCase().replace(/\s+/g, "-")}`}
                                  class="font-medium text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300"
                                >
                                  {npc.name}
                                </a>
                                {npc.first_encounter && (
                                  <span class="ml-2 px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">
                                    First Meeting
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Combat Encounters */}
                  {combat_encounters && combat_encounters.length > 0 && (
                    <div class="space-y-3">
                      <h4 class="font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                        <span class="text-lg">‚öîÔ∏è</span>
                        Combat Encounters
                      </h4>
                      <div class="space-y-2">
                        {combat_encounters.map((encounter: any) => (
                          <div class="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="font-medium text-gray-900 dark:text-gray-100">{encounter.name}</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                              {encounter.outcome && (
                                <div class={`inline-block px-2 py-1 rounded-full text-xs font-medium ${
                                  encounter.outcome === 'victory' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' :
                                  encounter.outcome === 'defeat' ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200' :
                                  encounter.outcome === 'retreat' ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200' :
                                  'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200'
                                }`}>
                                  {encounter.outcome}
                                </div>
                              )}
                              {encounter.rounds && <div>Rounds: {encounter.rounds}</div>}
                              {encounter.enemies && encounter.enemies.length > 0 && (
                                <div>Enemies: {encounter.enemies.map((enemy: any) => `${enemy.count || 1}x ${enemy.name}`).join(", ")}</div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Level Ups */}
                  {level_ups && level_ups.length > 0 && (
                    <div class="space-y-3">
                      <h4 class="font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                        <span class="text-lg">ÔøΩ</span>
                        Level Ups
                      </h4>
                      <div class="space-y-1">
                        {level_ups.map((levelUp: any) => (
                          <div class="flex items-center gap-2 text-purple-600 dark:text-purple-400 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                            </svg>
                            <span class="font-medium">{levelUp.character} reached level {levelUp.new_level}!</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )
      }

      <!-- Progress Bar -->
      <div id="reading-progress" class="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-purple-600 transform scale-x-0 origin-left transition-transform duration-300 z-50"></div>

      <!-- Session Content -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Main Content -->
        <div class="lg:col-span-3">
          <!-- Session Header (for sessions without cover image) -->
          {
            !cover_image && (
              <header class="mb-8 p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 rounded-xl border border-gray-200 dark:border-gray-700">
                <div class="flex items-center justify-between mb-4">
                  {
                    session_number && (
                      <div class="session-number text-sm font-bold px-3 py-1 bg-blue-600 text-white rounded-full">
                        Session {session_number}
                      </div>
                    )
                  }
                  {
                    displayDate && (
                      <div class="text-sm text-gray-600 dark:text-gray-400 flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <FormattedDate date={displayDate} />
                      </div>
                    )
                  }
                </div>
                <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                  {displayTitle}
                </h1>
                {
                  tags && tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mt-4">
                      {tags.map((tag: string) => (
                        <span class="tag px-2 py-1 text-sm font-medium rounded bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 border border-blue-200 dark:border-blue-700">
                          {tag}
                        </span>
                      ))}
                    </div>
                  )
                }
              </header>
            )
          }

          <!-- Article Content -->
          <article class="prose prose-lg dark:prose-invert max-w-none
            prose-headings:text-gray-900 dark:prose-headings:text-gray-100
            prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed
            prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline
            prose-strong:text-gray-900 dark:prose-strong:text-gray-100
            prose-code:text-purple-600 dark:prose-code:text-purple-400 prose-code:bg-gray-100 dark:prose-code:bg-gray-800 prose-code:px-1 prose-code:py-0.5 prose-code:rounded
            prose-pre:bg-gray-100 dark:prose-pre:bg-gray-800 prose-pre:border prose-pre:border-gray-200 dark:prose-pre:border-gray-700
            prose-blockquote:border-blue-500 prose-blockquote:bg-blue-50 dark:prose-blockquote:bg-blue-900/20 prose-blockquote:italic
            prose-th:text-gray-900 dark:prose-th:text-gray-100
            prose-td:text-gray-700 dark:prose-td:text-gray-300
            prose-img:rounded-lg prose-img:shadow-md prose-img:border prose-img:border-gray-200 dark:prose-img:border-gray-700
            prose-hr:border-gray-300 dark:prose-hr:border-gray-600
            prose-ul:space-y-2 prose-ol:space-y-2
            prose-li:text-gray-700 dark:prose-li:text-gray-300
          ">
            <slot />
          </article>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">
          <!-- Quick Stats Card -->
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700 sticky top-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              Quick Stats
            </h3>
            
            <div class="space-y-3 text-sm">
              {
                session_number && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">Session #</span>
                    <span class="font-medium text-gray-900 dark:text-gray-100">{session_number}</span>
                  </div>
                )
              }
              
              {
                combat_encounters && combat_encounters.length > 0 && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">Combats</span>
                    <span class="font-medium text-red-600 dark:text-red-400">{combat_encounters.length}</span>
                  </div>
                )
              }
              
              {
                characters_involved && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">Characters</span>
                    <span class="font-medium text-blue-600 dark:text-blue-400">{characters_involved.length}</span>
                  </div>
                )
              }
              
              {
                npcs_encountered && npcs_encountered.length > 0 && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">NPCs Met</span>
                    <span class="font-medium text-yellow-600 dark:text-yellow-400">{npcs_encountered.length}</span>
                  </div>
                )
              }
              
              {
                level_ups && level_ups.length > 0 && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">Level Ups</span>
                    <span class="font-medium text-green-600 dark:text-green-400">‚ú® {level_ups.length}</span>
                  </div>
                )
              }
              
              {
                group_rewards && group_rewards.length > 0 && (
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600 dark:text-gray-400">Treasure</span>
                    <span class="font-medium text-yellow-600 dark:text-yellow-400">üí∞ Found</span>
                  </div>
                )
              }
            </div>
            
            {
              tags && tags.length > 0 && (
                <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <h4 class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">Tags</h4>
                  <div class="flex flex-wrap gap-1">
                    {tags.map((tag: string) => (
                      <span class="px-2 py-1 text-xs font-medium rounded bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )
            }
          </div>

          <!-- Table of Contents -->
          <div id="sidebar-toc" class="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-gray-200 dark:border-gray-700 sticky top-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
              </svg>
              Contents
            </h3>
            <nav id="toc-nav" class="space-y-1 text-sm">
              <!-- TOC will be populated by JavaScript -->
            </nav>
          </div>
        </div>
      </div>

      <!-- Session Navigation -->
      {
        (previous_session || next_session) && (
          <div class="session-navigation mt-16 pt-12 border-t border-primary">
            <div class="nav-links grid grid-cols-1 md:grid-cols-2 gap-6">
              {previous_session && (
                <HoloCard
                  backgroundImage="/images/nav-bg-prev.jpg"
                  backgroundOpacity={0.2}
                  class="rounded-xl overflow-hidden border border-primary hover:border-accent-400 transition-colors"
                >
                  <a
                    href={`/journal/${previous_session
                      .replace(/\[\[|\]\]/g, "")
                      .toLowerCase()
                      .replace(/\s+/g, "-")}`}
                    class="prev-session group block p-6 h-full"
                  >
                    <div class="flex items-center gap-3 h-full">
                      <svg
                        class="w-8 h-8 text-secondary group-hover:text-accent-400 group-hover:-translate-x-1 transition-all flex-shrink-0"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      <div class="min-w-0">
                        <div class="font-semibold text-primary group-hover:text-accent-400 transition-colors">Previous Session</div>
                        <div class="text-sm text-secondary truncate">
                          {previous_session.replace(/\[\[|\]\]/g, "")}
                        </div>
                      </div>
                    </div>
                  </a>
                </HoloCard>
              )}

              {next_session && (
                <HoloCard
                  backgroundImage="/images/nav-bg-next.jpg"
                  backgroundOpacity={0.2}
                  class="rounded-xl overflow-hidden border border-primary hover:border-accent-400 transition-colors"
                >
                  <a
                    href={`/journal/${next_session
                      .replace(/\[\[|\]\]/g, "")
                      .toLowerCase()
                      .replace(/\s+/g, "-")}`}
                    class="next-session group block p-6 h-full"
                  >
                    <div class="flex items-center gap-3 h-full justify-end text-right">
                      <div class="min-w-0">
                        <div class="font-semibold text-primary group-hover:text-accent-400 transition-colors">Next Session</div>
                        <div class="text-sm text-secondary truncate">
                          {next_session.replace(/\[\[|\]\]/g, "")}
                        </div>
                      </div>
                      <svg
                        class="w-8 h-8 text-secondary group-hover:text-accent-400 group-hover:translate-x-1 transition-all flex-shrink-0"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                          clip-rule="evenodd"
                        />
                      </svg>
                    </div>
                  </a>
                </HoloCard>
              )}
            </div>
          </div>
        )
      }
      </div>
    </div>
  </article>

  <style>
    /* Enhanced Typography and Reading Experience */
    article.prose {
      line-height: 1.8;
      font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
    }

    article.prose h1,
    article.prose h2,
    article.prose h3,
    article.prose h4,
    article.prose h5,
    article.prose h6 {
      scroll-margin-top: 2rem;
      position: relative;
    }

    /* Heading anchors */
    article.prose h1:hover::before,
    article.prose h2:hover::before,
    article.prose h3:hover::before,
    article.prose h4:hover::before,
    article.prose h5:hover::before,
    article.prose h6:hover::before {
      content: "#";
      position: absolute;
      left: -1.5rem;
      color: rgb(59 130 246);
      font-weight: normal;
      opacity: 0.7;
      cursor: pointer;
    }

    /* Enhanced focus states for accessibility */
    .toc-link:focus,
    button:focus,
    input:focus {
      outline: 2px solid rgb(59 130 246);
      outline-offset: 2px;
    }

    /* Smooth reveal animations */
    @keyframes slideInFromRight {
      from {
        opacity: 0;
        transform: translateX(1rem);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    #sidebar-toc,
    .quick-stats {
      animation: slideInFromRight 0.6s ease-out;
    }

    /* Enhanced image styling */
    article.prose img {
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      transition: all 0.3s ease;
    }

    article.prose img:hover {
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
      transform: translateY(-2px);
    }

    /* Reading progress bar glow effect */
    #reading-progress {
      box-shadow: 0 0 8px rgba(59, 130, 246, 0.6);
    }

    /* Enhanced blockquote styling */
    article.prose blockquote {
      position: relative;
      font-style: italic;
      border-left: 4px solid rgb(59 130 246);
      margin: 2rem 0;
      padding: 1.5rem 2rem;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(147, 51, 234, 0.05));
      border-radius: 0 8px 8px 0;
    }

    article.prose blockquote::before {
      content: """;
      position: absolute;
      top: 0;
      left: 1rem;
      font-size: 3rem;
      color: rgb(59 130 246);
      opacity: 0.3;
      line-height: 1;
    }

    /* Code block enhancements */
    article.prose pre {
      position: relative;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Table enhancements */
    article.prose table {
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    article.prose th {
      background: linear-gradient(135deg, rgb(59 130 246), rgb(147 51 234));
      color: white;
      font-weight: 600;
    }

    /* Dark mode adjustments */
    @media (prefers-color-scheme: dark) {
      article.prose blockquote {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));
      }

      article.prose img {
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
      }

      article.prose img:hover {
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
      }

      article.prose th {
        background: linear-gradient(135deg, rgb(29 78 216), rgb(109 40 217));
      }
    }

    /* Print styles for better printability */
    @media print {
      #reading-progress,
      #sidebar-toc,
      .quick-stats,
      .session-navigation {
        display: none !important;
      }

      article.prose {
        max-width: none !important;
        font-size: 12pt;
        line-height: 1.6;
      }

      article.prose h1,
      article.prose h2,
      article.prose h3,
      article.prose h4,
      article.prose h5,
      article.prose h6 {
        page-break-after: avoid;
        color: black !important;
      }

      article.prose img {
        max-width: 100% !important;
        page-break-inside: avoid;
      }

      .lg\:col-span-3 {
        width: 100% !important;
      }

      .lg\:col-span-1 {
        display: none !important;
      }
    }

    /* Reduced motion preferences */
    @media (prefers-reduced-motion: reduce) {
      *,
      *::before,
      *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }

      #reading-progress {
        transition: none !important;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Reading progress bar
      const createProgressBar = () => {
        const progressBar = document.getElementById('reading-progress');
        if (!progressBar) return;

        const updateProgress = () => {
          const scrollTop = window.pageYOffset;
          const docHeight = document.documentElement.scrollHeight - window.innerHeight;
          const scrollPercent = scrollTop / docHeight;
          progressBar.style.transform = `scaleX(${Math.min(Math.max(scrollPercent, 0), 1)})`;
        };

        window.addEventListener('scroll', updateProgress);
        updateProgress(); // Initial call
      };

      // Enhanced Table of Contents with active section highlighting
      const generateTOC = () => {
        const tocNav = document.getElementById('toc-nav');
        if (!tocNav) return;
        
        const headings = document.querySelectorAll('article h1, article h2, article h3, article h4, article h5, article h6');
        
        if (headings.length === 0) {
          document.getElementById('sidebar-toc')?.remove();
          return;
        }
        
        let tocHTML = '';
        
        headings.forEach((heading, index) => {
          const level = parseInt(heading.tagName.charAt(1));
          const id = heading.id || `heading-${index}`;
          
          if (!heading.id) {
            heading.id = id;
          }
          
          const indent = Math.max(0, (level - 2) * 16); // Start from h2
          const textSize = level <= 2 ? 'text-sm font-medium' : 'text-xs';
          
          tocHTML += `
            <a href="#${id}" 
               class="toc-link block py-2 px-2 ${textSize} text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-all duration-200 border-l-2 border-transparent"
               style="margin-left: ${indent}px;"
               data-heading-id="${id}">
              ${heading.textContent?.trim()}
            </a>
          `;
        });
        
        tocNav.innerHTML = tocHTML;
        
        // Smooth scroll and active highlighting
        const tocLinks = tocNav.querySelectorAll('a');
        const headingElements = Array.from(headings);
        
        tocLinks.forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href')?.substring(1);
            const targetElement = document.getElementById(targetId || '');
            
            if (targetElement) {
              targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          });
        });
        
        // Intersection Observer for active section highlighting
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            const link = tocNav.querySelector(`[data-heading-id="${entry.target.id}"]`);
            if (link) {
              if (entry.isIntersecting) {
                // Remove active class from all links
                tocLinks.forEach(l => {
                  l.classList.remove('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/30', 'border-blue-500');
                  l.classList.add('text-gray-600', 'dark:text-gray-400', 'border-transparent');
                });
                
                // Add active class to current link
                link.classList.remove('text-gray-600', 'dark:text-gray-400', 'border-transparent');
                link.classList.add('text-blue-600', 'dark:text-blue-400', 'bg-blue-50', 'dark:bg-blue-900/30', 'border-blue-500');
              }
            }
          });
        }, {
          rootMargin: '-20% 0px -70% 0px',
          threshold: 0
        });
        
        headingElements.forEach(heading => {
          observer.observe(heading);
        });
      };

      // Metadata toggle functionality
      const setupMetadataToggle = () => {
        const metadataToggle = document.getElementById('metadata-toggle');
        const metadataContent = document.getElementById('metadata-content');
        const metadataChevron = document.getElementById('metadata-chevron');

        if (metadataToggle && metadataContent && metadataChevron) {
          metadataToggle.addEventListener('click', function() {
            const isHidden = metadataContent.style.display === 'none';
            
            if (isHidden) {
              metadataContent.style.display = 'block';
              metadataChevron.style.transform = 'rotate(180deg)';
              localStorage.setItem('sessionMetadataExpanded', 'true');
            } else {
              metadataContent.style.display = 'none';
              metadataChevron.style.transform = 'rotate(0deg)';
              localStorage.setItem('sessionMetadataExpanded', 'false');
            }
          });

          // Restore state from localStorage
          const isExpanded = localStorage.getItem('sessionMetadataExpanded') === 'true';
          if (isExpanded) {
            metadataContent.style.display = 'block';
            metadataChevron.style.transform = 'rotate(180deg)';
          }
        }
      };

      // Enhanced image interactions
      const enhanceImages = () => {
        const images = document.querySelectorAll('article img') as NodeListOf<HTMLImageElement>;
        images.forEach((img: HTMLImageElement) => {
          // Add loading states
          img.addEventListener('load', function(this: HTMLImageElement) {
            this.style.opacity = '1';
          });
          
          // Add click to expand functionality
          img.addEventListener('click', function(this: HTMLImageElement) {
            if (this.style.cursor === 'zoom-in' || !this.style.cursor) {
              this.style.cursor = 'zoom-out';
              this.style.transform = 'scale(1.5)';
              this.style.zIndex = '1000';
              this.style.position = 'relative';
            } else {
              this.style.cursor = 'zoom-in';
              this.style.transform = 'scale(1)';
              this.style.zIndex = 'auto';
              this.style.position = 'static';
            }
          });
          
          img.style.cursor = 'zoom-in';
          img.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
          img.style.opacity = '0';
        });
      };

      // Add keyboard navigation
      const addKeyboardNav = () => {
        document.addEventListener('keydown', function(e) {
          // J/K for scrolling (like vim)
          if (e.key === 'j' && !e.ctrlKey && !e.altKey && !e.metaKey) {
            const activeElement = document.activeElement;
            if (activeElement?.tagName !== 'INPUT' && activeElement?.tagName !== 'TEXTAREA') {
              e.preventDefault();
              window.scrollBy(0, 100);
            }
          }
          
          if (e.key === 'k' && !e.ctrlKey && !e.altKey && !e.metaKey) {
            const activeElement = document.activeElement;
            if (activeElement?.tagName !== 'INPUT' && activeElement?.tagName !== 'TEXTAREA') {
              e.preventDefault();
              window.scrollBy(0, -100);
            }
          }
          
          // T for TOC toggle
          if (e.key === 't' && !e.ctrlKey && !e.altKey && !e.metaKey) {
            const activeElement = document.activeElement;
            if (activeElement?.tagName !== 'INPUT' && activeElement?.tagName !== 'TEXTAREA') {
              e.preventDefault();
              const tocContainer = document.getElementById('sidebar-toc');
              if (tocContainer) {
                tocContainer.style.display = tocContainer.style.display === 'none' ? 'block' : 'none';
              }
            }
          }
        });
      };

      // Reading time estimation
      const addReadingTime = () => {
        const article = document.querySelector('article');
        if (!article) return;
        
        const wordCount = article.textContent?.split(/\s+/).length || 0;
        const readingTime = Math.ceil(wordCount / 200); // 200 words per minute
        
        if (readingTime > 1) {
          const sidebar = document.querySelector('#sidebar-toc');
          if (sidebar) {
            const readingTimeElement = document.createElement('div');
            readingTimeElement.className = 'text-xs text-gray-500 dark:text-gray-400 mt-2 pt-2 border-t border-gray-200 dark:border-gray-700';
            readingTimeElement.innerHTML = `üìñ ${readingTime} min read`;
            sidebar.appendChild(readingTimeElement);
          }
        }
      };

      // Initialize all features
      createProgressBar();
      generateTOC();
      setupMetadataToggle();
      enhanceImages();
      addKeyboardNav();
      addReadingTime();
    });
  </script>
</BaseLayout>
