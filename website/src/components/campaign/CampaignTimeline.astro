---
import { getCollection } from 'astro:content';

// Get timeline events from content collection
const allPartyContent = await getCollection('party');
const timelineEvents = allPartyContent
  .filter(entry => entry.data.type === 'timeline-event')
  .sort((a, b) => (a.data.sessionNumber || 0) - (b.data.sessionNumber || 0));

const getTagColor = (tag: string) => {
  const colors: Record<string, string> = {
    'arrival': 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200',
    'social': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200',
    'combat': 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200',
    'rescue': 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200',
    'heroic': 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200',
    'completed': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200',
    'magic': 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200',
    'investigation': 'bg-indigo-100 dark:bg-indigo-900/30 text-indigo-800 dark:text-indigo-200',
    'ongoing': 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200',
    'necromancy': 'bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-200',
    'red-larch': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200'
  };
  return colors[tag.toLowerCase()] || 'bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-200';
};

// Add a future event placeholder
const allEvents = [
  ...timelineEvents,
  {
    data: {
      title: "Future Adventures",
      description: "The next chapter of the party's journey through the Dessarin Valley awaits...",
      sessionNumber: undefined,
      eventDate: undefined,
      tags: [],
      experienceGained: undefined
    },
    isFuture: true
  }
];
---

<div class="mb-6">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-xl md:text-2xl font-bold text-text-primary flex items-center">
      ‚è∞ Campaign Timeline
    </h2>
    <div class="text-sm text-secondary">
      Session {timelineEvents.length - 1}
    </div>
  </div>

  <div class="relative">
    <!-- Timeline Line -->
    <div class="absolute left-6 top-0 bottom-0 w-0.5 bg-accent-400"></div>

    <div class="space-y-4">
      {
        allEvents.map((event) => (
          <div class="relative">
            <!-- Timeline Dot -->
            <div class={`absolute left-4 w-4 h-4 rounded-full border-2 ${
              'isFuture' in event && event.isFuture 
                ? 'bg-gray-300 border-gray-400' 
                : 'bg-accent-500 border-accent-600'
            } z-10`}></div>
            
            <!-- Event Card -->
            <div class={`ml-12 bg-surface-elevated rounded-lg shadow-card p-4 ${
              'isFuture' in event && event.isFuture ? 'opacity-60' : 'hover:shadow-card-hover'
            } transition-all`}>
              <div class="flex items-start justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span class="bg-accent-500 text-white text-xs font-bold px-2 py-1 rounded">
                    {event.data.sessionNumber || '?'}
                  </span>
                  <h3 class="text-base font-semibold text-text-primary">
                    {event.data.title}
                  </h3>
                </div>
                {event.data.eventDate && (
                  <span class="text-xs text-secondary">
                    {event.data.eventDate.toLocaleDateString()}
                  </span>
                )}
              </div>

              <p class="text-secondary text-sm mb-3 leading-relaxed">
                {event.data.description}
              </p>

              {event.data.tags && event.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-1 mb-2">
                  {event.data.tags.map((tag: string) => (
                    <span class={`${getTagColor(tag)} text-xs font-medium px-2 py-0.5 rounded`}>
                      {tag.charAt(0).toUpperCase() + tag.slice(1)}
                    </span>
                  ))}
                </div>
              )}

              {event.data.experienceGained && (
                <div class="text-xs text-tertiary pt-2 border-t border-primary/20">
                  Experience Gained: +{event.data.experienceGained} XP
                </div>
              )}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>
