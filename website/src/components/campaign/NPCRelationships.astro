---
import { getCollection } from "astro:content";

// Get all characters and filter for NPCs
const allCharacters = await getCollection("characters");
const npcs = allCharacters.filter((char) => char.data.type === "npc");
const pcs = allCharacters.filter(
  (char) => char.data.type === "pc" && char.data.active
);

// Analyze relationships and group NPCs
const relationshipAnalysis = {
  byFaction: {} as Record<string, any[]>,
  byLocation: {} as Record<string, any[]>,
  byDisposition: {
    hostile: [] as any[],
    unfriendly: [] as any[],
    neutral: [] as any[],
    friendly: [] as any[],
    allied: [] as any[],
  },
  byEncounter: {
    frequent: [] as any[], // Met in multiple sessions
    recent: [] as any[], // Met in recent sessions
    important: [] as any[], // Has high disposition or important tags
  },
};

// Process each NPC
npcs.forEach((npc) => {
  const data = npc.data;

  // Group by faction/organization
  if (data.organization?.name) {
    if (!relationshipAnalysis.byFaction[data.organization.name]) {
      relationshipAnalysis.byFaction[data.organization.name] = [];
    }
    relationshipAnalysis.byFaction[data.organization.name].push(npc);
  }

  if (data.enclave?.name) {
    if (!relationshipAnalysis.byFaction[data.enclave.name]) {
      relationshipAnalysis.byFaction[data.enclave.name] = [];
    }
    relationshipAnalysis.byFaction[data.enclave.name].push(npc);
  }

  // Group by location (from tags)
  if (data.tags) {
    data.tags.forEach((tag) => {
      if (tag.includes("red-larch") || tag.includes("location-")) {
        if (!relationshipAnalysis.byLocation[tag]) {
          relationshipAnalysis.byLocation[tag] = [];
        }
        relationshipAnalysis.byLocation[tag].push(npc);
      }
    });
  }

  // Group by disposition
  const disposition =
    data.organization?.disposition || data.enclave?.disposition || 50;
  if (disposition >= 80) {
    relationshipAnalysis.byDisposition.allied.push(npc);
  } else if (disposition >= 60) {
    relationshipAnalysis.byDisposition.friendly.push(npc);
  } else if (disposition >= 40) {
    relationshipAnalysis.byDisposition.neutral.push(npc);
  } else if (disposition >= 20) {
    relationshipAnalysis.byDisposition.unfriendly.push(npc);
  } else {
    relationshipAnalysis.byDisposition.hostile.push(npc);
  }

  // Categorize by importance
  if (
    data.tags?.some((tag) =>
      ["important", "major", "boss", "leader"].includes(tag)
    )
  ) {
    relationshipAnalysis.byEncounter.important.push(npc);
  }
});

// Helper functions
const getDispositionColor = (disposition: number) => {
  if (disposition >= 80) return "text-green-600 bg-green-100";
  if (disposition >= 60) return "text-blue-600 bg-blue-100";
  if (disposition >= 40) return "text-gray-600 bg-gray-100";
  if (disposition >= 20) return "text-orange-600 bg-orange-100";
  return "text-red-600 bg-red-100";
};

const getDispositionLabel = (disposition: number) => {
  if (disposition >= 80) return "Allied";
  if (disposition >= 60) return "Friendly";
  if (disposition >= 40) return "Neutral";
  if (disposition >= 20) return "Unfriendly";
  return "Hostile";
};

const getCharacterPortrait = (character: any) => {
  if (character.data.portrait) {
    return `/src/assets/portraits/${character.data.portrait}`;
  }
  return "/src/assets/portraits/placeholder-portrait.png";
};
---

<div
  class="bg-surface-elevated rounded-xl p-6 shadow-card border border-primary mb-8"
>
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold text-text-primary flex items-center gap-2">
      ü§ù NPC Relationships
    </h2>
    <div class="text-sm text-secondary">
      {npcs.length} NPCs Tracked
    </div>
  </div>

  <!-- Quick Stats -->
  <div class="grid grid-cols-2 md:grid-cols-5 gap-3 mb-6">
    {
      Object.entries(relationshipAnalysis.byDisposition).map(
        ([disposition, characters]) => {
          const dispositionValue =
            disposition === "allied"
              ? 85
              : disposition === "friendly"
                ? 70
                : disposition === "neutral"
                  ? 50
                  : disposition === "unfriendly"
                    ? 30
                    : 15;
          const colorClass = getDispositionColor(dispositionValue);

          return (
            <div
              class={`rounded-lg p-3 text-center ${colorClass.split(" ")[1]} border border-primary/20`}
            >
              <div class={`text-lg font-bold ${colorClass.split(" ")[0]}`}>
                {characters.length}
              </div>
              <div
                class={`text-sm font-medium ${colorClass.split(" ")[0]} capitalize`}
              >
                {disposition}
              </div>
            </div>
          );
        }
      )
    }
  </div>

  <!-- Faction Relationships -->
  <div class="mb-8">
    <h3
      class="text-lg font-semibold text-text-primary mb-4 flex items-center gap-2"
    >
      üèõÔ∏è By Faction & Organization
    </h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {
        Object.entries(relationshipAnalysis.byFaction)
          .sort(([, a], [, b]) => b.length - a.length)
          .slice(0, 6)
          .map(([faction, members]) => {
            const avgDisposition =
              members.reduce((sum, member) => {
                return (
                  sum +
                  (member.data.organization?.disposition ||
                    member.data.enclave?.disposition ||
                    50)
                );
              }, 0) / members.length;

            return (
              <div class="hero-card bg-surface-secondary rounded-lg p-4 border border-primary/20">
                <div class="flex items-center justify-between mb-3">
                  <h4 class="font-semibold text-text-primary">{faction}</h4>
                  <div class="flex items-center gap-2">
                    <span
                      class={`text-xs px-2 py-1 rounded-full ${getDispositionColor(avgDisposition)}`}
                    >
                      {getDispositionLabel(avgDisposition)}
                    </span>
                    <span class="text-xs text-secondary">
                      {members.length} members
                    </span>
                  </div>
                </div>

                <div class="flex flex-wrap gap-1">
                  {members.slice(0, 6).map((member) => (
                    <div class="group relative">
                      <div class="w-8 h-8 rounded-full bg-surface-tertiary border border-primary/20 overflow-hidden">
                        <img
                          src={getCharacterPortrait(member)}
                          alt={member.data.name}
                          class="w-full h-full object-cover"
                          onerror="this.src='/src/assets/portraits/placeholder-portrait.png'"
                        />
                      </div>
                      <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10">
                        {member.data.name}
                      </div>
                    </div>
                  ))}
                  {members.length > 6 && (
                    <div class="w-8 h-8 rounded-full bg-surface-tertiary border border-primary/20 flex items-center justify-center text-xs text-secondary">
                      +{members.length - 6}
                    </div>
                  )}
                </div>
              </div>
            );
          })
      }
    </div>
  </div>

  <!-- Important NPCs -->
  <div class="mb-8">
    <h3
      class="text-lg font-semibold text-text-primary mb-4 flex items-center gap-2"
    >
      ‚≠ê Key Figures
    </h3>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {
        relationshipAnalysis.byEncounter.important.slice(0, 6).map((npc) => {
          const disposition =
            npc.data.organization?.disposition ||
            npc.data.enclave?.disposition ||
            50;

          return (
            <div class="hero-card bg-surface-secondary rounded-lg p-4 border border-primary/20 hover:shadow-card-hover transition-all duration-300">
              <div class="flex items-center gap-3 mb-3">
                <div class="w-12 h-12 rounded-full bg-surface-tertiary border border-primary/20 overflow-hidden flex-shrink-0">
                  <img
                    src={getCharacterPortrait(npc)}
                    alt={npc.data.name}
                    class="w-full h-full object-cover"
                    onerror="this.src='/src/assets/portraits/placeholder-portrait.png'"
                  />
                </div>
                <div class="flex-1 min-w-0">
                  <h4 class="font-semibold text-text-primary truncate">
                    {npc.data.name}
                  </h4>
                  <p class="text-sm text-secondary">
                    {npc.data.race} {npc.data.background || "NPC"}
                  </p>
                </div>
              </div>

              <div class="flex items-center justify-between">
                <span
                  class={`text-xs px-2 py-1 rounded-full ${getDispositionColor(disposition)}`}
                >
                  {getDispositionLabel(disposition)}
                </span>
                <div class="flex gap-1">
                  {npc.data.tags?.slice(0, 2).map((tag: string) => (
                    <span class="text-xs bg-accent-500/20 text-accent-600 px-2 py-0.5 rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>

              {npc.data.description && (
                <p class="text-xs text-tertiary mt-2 line-clamp-2">
                  {npc.data.description}
                </p>
              )}
            </div>
          );
        })
      }
    </div>
  </div>

  <!-- Quick Actions -->
  <div class="flex flex-wrap gap-3 pt-4 border-t border-primary/20">
    <a
      href="/characters?type=npc"
      class="hero-button-secondary px-4 py-2 text-sm"
    >
      üìñ View All NPCs
    </a>
    <a
      href="/characters?type=npc&status=alive"
      class="hero-button-secondary px-4 py-2 text-sm"
    >
      üë• Active NPCs
    </a>
    <a href="/atlas" class="hero-button-secondary px-4 py-2 text-sm">
      üó∫Ô∏è Locations
    </a>
  </div>
</div>
