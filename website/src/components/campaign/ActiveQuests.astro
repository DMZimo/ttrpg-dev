---
import { getCollection } from 'astro:content';

// Get active quests from content collection
const allPartyContent = await getCollection('party');
const activeQuests = allPartyContent.filter(entry => 
  entry.data.type === 'quest' && entry.data.status === 'active'
);

// Utility functions for styling based on quest data
const getStatusColor = (status: string) => {
  switch (status) {
    case 'active': return 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200';
    case 'completed': return 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200';
    case 'failed': return 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200';
    case 'paused': return 'bg-gray-100 dark:bg-gray-900/30 text-gray-800 dark:text-gray-200';
    default: return 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200';
  }
};

const getBorderColor = (priority: string) => {
  switch (priority) {
    case 'high': return 'border-red-500';
    case 'urgent': return 'border-red-600';
    case 'medium': return 'border-yellow-500';
    case 'low': return 'border-green-500';
    default: return 'border-gray-500';
  }
};

const getTagColor = (tag: string) => {
  const colors: Record<string, string> = {
    'combat': 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200',
    'investigation': 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200',
    'trade': 'bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200',
    'magic': 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200',
    'undead': 'bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-200',
    'dangerous': 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200',
    'necromancy': 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-200',
    'exploration': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200'
  };
  return colors[tag.toLowerCase()] || 'bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-200';
};

const formatStatusText = (status: string) => {
  switch (status) {
    case 'active': return 'In Progress';
    default: return status.charAt(0).toUpperCase() + status.slice(1);
  }
};

const getPriorityIcon = (priority: string) => {
  switch (priority) {
    case 'high': return 'üî¥';
    case 'medium': return 'üü°';
    case 'low': return 'üü¢';
    default: return '‚ö™';
  }
};

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty) {
    case 'Easy': return 'text-green-600';
    case 'Medium': return 'text-yellow-600';
    case 'Hard': return 'text-orange-600';
    case 'Deadly': return 'text-red-600';
    default: return 'text-gray-600';
  }
};
---

<div class="mb-6">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-xl md:text-2xl font-bold text-primary flex items-center">
      üéØ Active Quests
    </h2>
    <div class="text-sm text-secondary">
      {activeQuests.length} Active
    </div>
  </div>
  
  <div class="space-y-5">
    {activeQuests.map((quest) => (
      <div class={`hero-card bg-surface-elevated rounded-xl shadow-card border-l-4 ${getBorderColor(quest.data.priority || 'medium')} p-6 hover:shadow-card-hover transition-all duration-300 group relative overflow-hidden`}>
        <!-- Priority indicator gradient -->
        <div class={`absolute top-0 right-0 w-20 h-20 opacity-10 group-hover:opacity-20 transition-opacity duration-300 ${
          quest.data.priority === 'high' ? 'bg-gradient-to-bl from-red-500' :
          quest.data.priority === 'urgent' ? 'bg-gradient-to-bl from-red-600' :
          quest.data.priority === 'medium' ? 'bg-gradient-to-bl from-yellow-500' :
          'bg-gradient-to-bl from-green-500'
        }`}></div>
        
        <div class="relative z-10">
          <!-- Quest Header -->
          <div class="flex items-start justify-between mb-4">
            <div class="flex items-center gap-3">
              <span class="text-xl animate-pulse">{getPriorityIcon(quest.data.priority || 'medium')}</span>
              <h3 class="text-xl font-bold text-primary group-hover:text-accent-400 transition-colors duration-200">{quest.data.title}</h3>
            </div>
            <span class={`${getStatusColor(quest.data.status)} text-sm font-semibold px-3 py-1.5 rounded-full border shadow-sm`}>
              {formatStatusText(quest.data.status)}
            </span>
          </div>

          <!-- Progress Bar with enhanced styling -->
          <div class="mb-4">
            <div class="flex items-center justify-between text-sm text-secondary mb-2">
              <span class="font-medium">Progress</span>
              <span class="font-bold text-accent-400">{quest.data.progress || 0}%</span>
            </div>
            <div class="w-full bg-surface-secondary rounded-full h-3 shadow-inner">
              <div 
                class="bg-gradient-to-r from-accent-500 to-accent-600 h-3 rounded-full transition-all duration-500 ease-out shadow-sm relative overflow-hidden" 
                style={`width: ${quest.data.progress || 0}%`}
              >
                <div class="absolute inset-0 bg-white/20 animate-pulse"></div>
              </div>
            </div>
          </div>

          <!-- Description -->
          <p class="text-secondary text-sm mb-4 leading-relaxed">{quest.data.description}</p>
          
          <!-- Tags and Difficulty -->
          <div class="flex flex-wrap items-center justify-between gap-3 mb-4">
            <div class="flex flex-wrap gap-2">
              {quest.data.tags?.map((tag: string) => (
                <span class={`${getTagColor(tag)} text-xs font-semibold px-3 py-1 rounded-full border hover:scale-105 transition-transform duration-200`}>
                  {tag.charAt(0).toUpperCase() + tag.slice(1)}
                </span>
              ))}
            </div>
            {quest.data.difficulty && (
              <div class="flex items-center gap-2">
                <span class="text-xs text-muted">Difficulty:</span>
                <div class={`text-sm font-bold ${getDifficultyColor(quest.data.difficulty)} bg-surface-secondary px-2 py-1 rounded-md`}>
                  {quest.data.difficulty.charAt(0).toUpperCase() + quest.data.difficulty.slice(1)}
                </div>
              </div>
            )}
          </div>
          
          <!-- Details with icons -->
          <div class="text-sm text-tertiary pt-3 border-t border-primary/20">
            <div class="flex flex-wrap gap-4">
              {quest.data.location && (
                <div class="flex items-center gap-2">
                  <span>üìç</span>
                  <span>Location: <span class="font-medium">{quest.data.location}</span></span>
                </div>
              )}
              {quest.data.questGiver && (
                <div class="flex items-center gap-2">
                  <span>üë§</span>
                  <span>Giver: <span class="font-medium">{quest.data.questGiver}</span></span>
                </div>
              )}
              {quest.data.reward && (
                <div class="flex items-center gap-2">
                  <span class="text-gold-500">üí∞</span>
                  <span>Reward: <span class="font-medium text-gold-500">{quest.data.reward}</span></span>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>
