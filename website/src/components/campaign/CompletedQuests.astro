---
import { getCollection } from 'astro:content';

// Get completed quests from the quests collection
const allQuests = await getCollection('quests').catch(() => []);
const completedQuests = allQuests.filter(quest => quest.data.status === 'completed');

// Utility functions for styling
const getTagColor = (tag: string) => {
  const colors: Record<string, string> = {
    'combat': 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200',
    'rescue': 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200',
    'heroic': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200',
    'completed': 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200',
    'exploration': 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200'
  };
  return colors[tag.toLowerCase()] || 'bg-gray-100 dark:bg-gray-700/30 text-gray-800 dark:text-gray-200';
};
---

<div class="mb-6">
  <div class="flex items-center justify-between mb-4">
    <h2 class="text-xl md:text-2xl font-bold text-text-primary flex items-center">
      ‚úÖ Completed Adventures
    </h2>
    <div class="text-sm text-secondary">
      {completedQuests.length} Completed
    </div>
  </div>

  <div class="space-y-4">
    {completedQuests.length === 0 ? (
      <div class="text-center py-8 text-secondary">
        <p>No completed quests yet. Complete some quests to see them here!</p>
      </div>
    ) : (
      completedQuests.map((quest) => (
        <div
          class="hero-card bg-surface-elevated rounded-lg shadow-card border-l-4 border-success p-5 opacity-85 hover:opacity-100 hover:shadow-card-hover transition-all duration-300 group relative overflow-hidden"
        >
          <!-- Subtle background gradient for completed quests -->
          <div class="absolute inset-0 bg-gradient-to-r from-success/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          
          <div class="relative z-10">
            <div class="flex items-start justify-between mb-4">
              <div class="flex items-center gap-3">
                <span class="text-2xl animate-pulse">‚úÖ</span>
                <h3 class="text-lg font-bold text-text-primary group-hover:text-success transition-colors duration-200">{quest.data.title}</h3>
              </div>
              <span
                class="bg-success/20 text-success border border-success/30 text-sm font-semibold px-3 py-1.5 rounded-full shadow-sm"
              >
                {quest.data.status.charAt(0).toUpperCase() + quest.data.status.slice(1)}
              </span>
            </div>

            <p class="text-secondary text-sm mb-4 leading-relaxed line-clamp-3">
              {quest.data.description}
            </p>

            <div class="flex flex-wrap gap-2 mb-4">
              {quest.data.tags?.map((tag: string) => (
                <span
                  class={`${getTagColor(tag)} text-xs font-semibold px-3 py-1 rounded-full border shadow-sm hover:scale-105 transition-transform duration-200`}
                >
                  {tag.charAt(0).toUpperCase() + tag.slice(1)}
                </span>
              ))}
            </div>

            <div class="text-sm text-tertiary pt-3 border-t border-success/20">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-2">
                  <span class="text-gold-500">üèÜ</span>
                  <span class="font-medium">Reward: {quest.data.reward || 'Adventure experience'}</span>
                </div>
                <div class="flex items-center gap-2 text-xs">
                  {quest.data.completed_date && (
                    <span class="bg-surface-secondary px-2 py-1 rounded-md">
                      Completed: {quest.data.completed_date.toLocaleDateString()}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))
    )}
  </div>
</div>
