---
import {
  formatHarptosDate,
  formatHarptosTime,
  getMoonPhase,
  getSeasonEmoji,
  getSeasonTextColor,
  isLeapYear,
} from "../../utils/gameCalendarUtils";
import type {
  HarptosDate,
  HarptosTime,
  MonthEntry,
  HolidayEntry,
} from "../../utils/gameCalendarUtils";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

// Define collection entry types for missing collections
type CelestialEntry = any; // Fallback for missing collection

interface Props {
  currentDate: HarptosDate;
  currentTime: HarptosTime;
}

// Get collections data
const monthsData = await getCollection("months");
const holidaysData = await getCollection("holidays");

// Get celestial data if available, otherwise use empty array
let celestialData: CelestialEntry[] = [];
try {
  celestialData = await getCollection("celestial");
} catch (error) {
  // Celestial collection might not exist yet
  celestialData = [];
}

// Get events data if available
let eventsData: any[] = [];
try {
  eventsData = await getCollection("events");
} catch (error) {
  // Events collection might not exist yet
  eventsData = [];
}

const { currentDate, currentTime } = Astro.props;
const currentMoonPhase = getMoonPhase(currentDate, celestialData);
const currentSeasonEmoji = getSeasonEmoji(currentDate.season);
const currentSeasonText = getSeasonTextColor(currentDate.season);

// Get current month data from collections
const monthData = monthsData.find(
  (m) => m.data.month_number === currentDate.month
);

// Check if current date is a holiday
const todayHoliday = holidaysData.find((h) => {
  const date = h.data.date;
  return (
    "month" in date &&
    "day" in date &&
    date.month === currentDate.month &&
    date.day === currentDate.day
  );
});

// Find upcoming holidays (next 5 holidays)
const currentDayOfYear = (currentDate.month - 1) * 30 + currentDate.day;
const upcomingHolidays = holidaysData
  .map((holidayEntry) => {
    const holiday = holidayEntry.data;
    // Check if it's a regular date holiday
    if ("month" in holiday.date && "day" in holiday.date) {
      const holidayDayOfYear = (holiday.date.month - 1) * 30 + holiday.date.day;
      let daysUntil = holidayDayOfYear - currentDayOfYear;
      if (daysUntil <= 0) daysUntil += 365; // Next year
      return {
        holiday: {
          id: holidayEntry.id,
          name: holiday.name,
          description: holiday.description,
          type: holiday.type,
          observance: holiday.observance,
        },
        daysUntil,
        month: holiday.date.month,
        day: holiday.date.day,
      };
    }
    return null;
  })
  .filter((item): item is NonNullable<typeof item> => item !== null)
  .sort((a, b) => a.daysUntil - b.daysUntil)
  .slice(0, 5); // Show next 5 holidays

// Get today's special events
const todaysEvents: Array<{
  name: string;
  emoji: string;
  description: string;
  type: string;
}> = [];

if (todayHoliday) {
  todaysEvents.push({
    name: todayHoliday.data.name,
    emoji: "üéâ",
    description: todayHoliday.data.description,
    type: todayHoliday.data.type || "holiday",
  });
}

// Get recent campaign events (from events collection)
const recentEvents = eventsData
  .filter((event) => {
    // Basic filter - you can enhance this logic
    return event.data.type === "timeline-event";
  })
  .sort((a, b) => {
    // Sort by session number or date
    if (a.data.sessionNumber && b.data.sessionNumber) {
      return b.data.sessionNumber - a.data.sessionNumber;
    }
    return 0;
  })
  .slice(0, 3); // Show last 3 events
---

<!-- Sidebar Calendar Widget -->
<div class="calendar-sidebar-widget h-full w-64">
  <div
    class="widget-container h-full bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/40 dark:to-indigo-950/40 border border-blue-200 dark:border-blue-800 rounded-xl shadow-lg overflow-hidden flex flex-col"
  >
    <!-- Widget Header -->
    <div
      class="widget-header px-4 py-3 bg-white/60 dark:bg-black/30 border-b border-blue-200/50 dark:border-blue-800/50 flex-shrink-0"
    >
      <div class="flex flex-col justify-between">
        <!-- Current Date & Time -->
        <div class="current-datetime">
          <div class="text-base font-medium text-blue-800 dark:text-blue-200">
            {currentTime.formalName}
          </div>
          <div class="text-xl font-bold text-blue-900 dark:text-blue-100 mb-1">
            {formatHarptosDate(currentDate, monthsData, "formal")}
            <span class="text-sm text-blue-900 dark:text-blue-100 cursor-help" title={isLeapYear(currentDate.year) ? "leap year" : ""}>
              {isLeapYear(currentDate.year) ? "üí´" : ""}
            </span>
          </div>
          <div class="text-sm text-blue-700 dark:text-blue-300 mb-2 opacity-80">
            {monthData?.data.alias || monthData?.data.name} ‚Ä¢ {
              currentDate.season.charAt(0).toUpperCase() +
                currentDate.season.slice(1)
            }
          </div>
        </div>
      </div>
    </div>

    <!-- Scrollable Content -->
    <div class="widget-content p-4 overflow-y-auto flex-1 space-y-4">
      <!-- Extra info -->
      <div class="moon-info">
        <div
          class="flex flex-col gap-3 p-2 bg-blue-100/50 dark:bg-blue-900/20 rounded-lg"
        >
          <!-- Moon Phase Info -->
          <div class="flex items-center gap-3">
            <span class="text-2xl">{currentMoonPhase.emoji}</span>
            <div>
              <div
                class="font-medium text-blue-900 dark:text-blue-100 text-sm capitalize"
              >
                {currentMoonPhase.phase.replace("_", " ")}
              </div>
              <div class="text-xs text-blue-700 dark:text-blue-300 opacity-80">
                {currentMoonPhase.description}
              </div>
            </div>
          </div>
          <!-- Tenday info -->
          <div class="space-y-2">
            <div
              class="flex justify-between gap-1 text-xs text-blue-700 dark:text-blue-300"
            >
              <span>Tenday {currentDate.tenday}</span>
              <span>Day {currentDate.dayOfTenday} of 10</span>
            </div>
            <div
              class="progress-bar w-full bg-blue-200/50 dark:bg-blue-800/30 rounded-full h-2 overflow-hidden"
            >
              <div
                class="progress-fill h-full bg-gradient-to-r from-blue-500 to-indigo-500 dark:from-blue-400 dark:to-indigo-400 rounded-full transition-all duration-500 ease-out"
                style={`width: ${(currentDate.dayOfTenday / 10) * 100}%`}
              >
              </div>
            </div>
          </div>
          <!-- Season Info -->

          <div class="flex justify-between items-center text-xs">
            <span class="text-blue-700 dark:text-blue-300">Current Season:</span
            >
            <span
              class={`font-medium capitalize flex items-center gap-1 ${currentSeasonText}`}
            >
              {currentSeasonEmoji}
              {currentDate.season}
            </span>
          </div>
          <div class="flex justify-between items-center text-xs">
            <span class="text-blue-700 dark:text-blue-300"
              >Season Progress:</span
            >
            <span class="font-medium text-blue-900 dark:text-blue-100">
              {currentDate.month % 3 === 0 ? 3 : currentDate.month % 3} of 3 months
            </span>
          </div>
          <div
            class="w-full bg-blue-200/50 dark:bg-blue-800/30 rounded-full h-1.5 overflow-hidden"
          >
            <div
              class={`h-full rounded-full transition-all duration-500 ${
                currentDate.season === "winter"
                  ? "bg-blue-400"
                  : currentDate.season === "spring"
                    ? "bg-green-400"
                    : currentDate.season === "summer"
                      ? "bg-yellow-400"
                      : "bg-orange-400"
              }`}
              style={`width: ${((currentDate.month % 3 === 0 ? 3 : currentDate.month % 3) / 3) * 100}%`}
            >
            </div>
          </div>
        </div>
        <!-- <div class="flex justify-between items-center text-xs">
          <span class="text-blue-700 dark:text-blue-300">Leap Year:</span>
        </div> -->
      </div>

      {
        todaysEvents.length > 0 && (
          <div class="todays-events">
            <h4 class="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2 flex items-center gap-2">
              üéâ Today's Events
            </h4>
            <div class="space-y-2">
              {todaysEvents.map((event) => (
                <div class="event-item p-2 bg-amber-100 dark:bg-amber-900/30 rounded-lg border border-amber-200 dark:border-amber-800">
                  <div class="flex items-start gap-2">
                    <span class="text-base flex-shrink-0">{event.emoji}</span>
                    <div class="min-w-0">
                      <div class="font-medium text-amber-900 dark:text-amber-100 text-sm">
                        {event.name}
                      </div>
                      <div class="text-xs text-amber-700 dark:text-amber-300 opacity-80 capitalize">
                        {event.type}
                      </div>
                      {event.description && (
                        <div class="text-xs text-amber-800 dark:text-amber-200 mt-1 line-clamp-2">
                          {event.description}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Recent Campaign Events -->
      {
        recentEvents.length > 0 && (
          <div class="recent-events">
            <h4 class="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2 flex items-center gap-2">
              ‚öîÔ∏è Recent Events
            </h4>
            <div class="space-y-2">
              {recentEvents.map((event) => (
                <div class="event-item p-2 bg-purple-50 dark:bg-purple-950/20 rounded-lg border border-purple-200 dark:border-purple-800/50">
                  <div class="flex items-start gap-2">
                    <span class="text-base flex-shrink-0">üìú</span>
                    <div class="min-w-0">
                      <div class="font-medium text-purple-900 dark:text-purple-100 text-sm">
                        {event.data.title}
                      </div>
                      {event.data.sessionNumber && (
                        <div class="text-xs text-purple-700 dark:text-purple-300 opacity-80">
                          Session {event.data.sessionNumber}
                        </div>
                      )}
                      {event.data.description && (
                        <div class="text-xs text-purple-800 dark:text-purple-200 mt-1 line-clamp-2">
                          {event.data.description}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Upcoming Holidays -->
      {
        upcomingHolidays.length > 0 && (
          <div class="upcoming-holidays">
            <h4 class="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-2 flex items-center gap-2">
              üóìÔ∏è Upcoming Holidays
            </h4>
            <div class="space-y-2">
              {upcomingHolidays.map((item) => (
                <div class="holiday-item p-2 bg-green-50 dark:bg-green-950/20 rounded-lg border border-green-200 dark:border-green-800/50">
                  <div class="flex items-start justify-between gap-2">
                    <div class="min-w-0 flex-1">
                      <a
                        href={`/timekeeping/holidays/${item.holiday.id || item.holiday.name.toLowerCase().replace(/\s+/g, "-")}`}
                        class="font-medium text-green-900 dark:text-green-100 text-sm hover:underline block"
                      >
                        {item.holiday.name}
                      </a>
                      <div class="text-xs text-green-700 dark:text-green-300 opacity-80 capitalize">
                        {item.holiday.type} ‚Ä¢ {item.holiday.observance}
                      </div>
                    </div>
                    <div class="text-xs text-green-600 dark:text-green-400 font-medium flex-shrink-0">
                      {item.daysUntil === 0
                        ? "Today"
                        : item.daysUntil === 1
                          ? "Tomorrow"
                          : `${item.daysUntil} days`}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  .calendar-sidebar-widget {
    position: sticky;
    top: 1rem;
    max-height: calc(100vh - 2rem);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .widget-content::-webkit-scrollbar {
    width: 4px;
  }

  .widget-content::-webkit-scrollbar-track {
    background: transparent;
  }

  .widget-content::-webkit-scrollbar-thumb {
    background: rgba(59, 130, 246, 0.3);
    border-radius: 2px;
  }

  .widget-content::-webkit-scrollbar-thumb:hover {
    background: rgba(59, 130, 246, 0.5);
  }

  .holiday-item:hover,
  .event-item:hover {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  @media (max-width: 1024px) {
    .calendar-sidebar-widget {
      position: static;
      max-height: none;
    }
  }
</style>
