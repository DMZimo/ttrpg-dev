---
import {
  buildContentIndex,
  findRelatedContent,
  findBacklinks,
} from "@/utils/crossLinking";

interface Props {
  currentPageId: string;
  currentTitle: string;
  contentType: string;
  content?: string;
  relatedCharacters?: string[];
  relatedLocations?: string[];
  tags?: string[];
  limit?: number;
}

const {
  currentPageId,
  currentTitle,
  contentType,
  content = "",
  relatedCharacters = [],
  relatedLocations = [],
  tags = [],
  limit = 8,
} = Astro.props;

// Build content index for cross-linking
const contentIndex = await buildContentIndex();

// Find related content based on multiple criteria
const searchText = [
  content,
  relatedCharacters.join(" "),
  relatedLocations.join(" "),
  tags.join(" "),
].join(" ");

const relatedContent = findRelatedContent(
  searchText,
  contentIndex,
  currentPageId,
  limit
);

// Find backlinks to this content
const backlinks = await findBacklinks(currentPageId, currentTitle, contentType);

// Group related content by type
const groupedContent = relatedContent.reduce(
  (acc, item) => {
    if (!acc[item.type]) acc[item.type] = [];
    acc[item.type].push(item);
    return acc;
  },
  {} as Record<string, typeof relatedContent>
);

// Get icon for content type
const getTypeIcon = (type: string) => {
  switch (type) {
    case "character":
      return "👤";
    case "location":
      return "📍";
    case "quest":
      return "⚔️";
    case "mystery":
      return "🔍";
    case "rumor":
      return "👂";
    case "session":
      return "📖";
    default:
      return "📄";
  }
};

// Get type label
const getTypeLabel = (type: string) => {
  switch (type) {
    case "character":
      return "Characters";
    case "location":
      return "Locations";
    case "quest":
      return "Quests";
    case "mystery":
      return "Mysteries";
    case "rumor":
      return "Rumors";
    case "session":
      return "Sessions";
    default:
      return "Content";
  }
};

const hasRelatedContent =
  Object.keys(groupedContent).length > 0 || backlinks.length > 0;
---

{
  hasRelatedContent && (
    <div class="mt-8 bg-surface-elevated rounded-xl p-6 border border-primary/20">
      <h3 class="text-lg font-bold text-text-primary mb-4 flex items-center gap-2">
        🔗 Related Content
      </h3>

      {/* Related Content by Type */}
      {Object.entries(groupedContent).map(([type, items]) => (
        <div class="mb-6 last:mb-0">
          <h4 class="text-md font-semibold text-secondary mb-3 flex items-center gap-2">
            <span class="text-lg">{getTypeIcon(type)}</span>
            {getTypeLabel(type)}
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            {items.map((item) => (
              <a
                href={item.url}
                class="block p-3 bg-surface-secondary rounded-lg border border-primary/10 hover:border-accent-400/50 hover:bg-accent-50 dark:hover:bg-accent-900/20 transition-all duration-200 group"
              >
                <div class="flex items-center gap-3">
                  <span class="text-lg">{getTypeIcon(item.type)}</span>
                  <div class="flex-1 min-w-0">
                    <span class="text-sm font-medium text-text-primary group-hover:text-accent-600 dark:group-hover:text-accent-400 transition-colors duration-200 block truncate">
                      {item.name}
                    </span>
                    {item.tags && item.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1 mt-1">
                        {item.tags.slice(0, 3).map((tag) => (
                          <span class="text-xs px-2 py-0.5 bg-accent-100 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 rounded-full">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      ))}

      {/* Backlinks Section */}
      {backlinks.length > 0 && (
        <div class="mt-6 pt-6 border-t border-primary/20">
          <h4 class="text-md font-semibold text-secondary mb-3 flex items-center gap-2">
            <span class="text-lg">🔙</span>
            Referenced In
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            {backlinks.map((link) => (
              <a
                href={link.url}
                class="block p-3 bg-surface-secondary rounded-lg border border-primary/10 hover:border-accent-400/50 hover:bg-accent-50 dark:hover:bg-accent-900/20 transition-all duration-200 group"
              >
                <div class="flex items-center gap-3">
                  <span class="text-lg">{getTypeIcon(link.type)}</span>
                  <span class="text-sm font-medium text-text-primary group-hover:text-accent-600 dark:group-hover:text-accent-400 transition-colors duration-200">
                    {link.name}
                  </span>
                </div>
              </a>
            ))}
          </div>
        </div>
      )}

      {/* Cross-Reference Help */}
      <div class="mt-4 pt-4 border-t border-primary/20">
        <p class="text-xs text-muted italic">
          Content automatically linked based on shared characters, locations,
          tags, and references.
        </p>
      </div>
    </div>
  )
}
