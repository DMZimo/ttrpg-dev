---
// Enhanced client-side filtering component
interface Props {
  allTags?: string[];
  allLocations?: string[];
  allCharacters?: string[];
  allNpcs?: string[];
  allCombatTypes?: string[];
  allOutcomes?: string[];
  dateRange?: {
    earliest: Date;
    latest: Date;
  };
  maxSessionNumber?: number;
  minSessionNumber?: number;
}

const {
  allTags = [],
  allLocations = [],
  allCharacters = [],
  allNpcs = [],
  allCombatTypes = [],
  allOutcomes = [],
  dateRange,
  maxSessionNumber = 999,
  minSessionNumber = 1,
} = Astro.props;
---

<div
  class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-8"
>
  <!-- Filter Header -->
  <div class="flex items-center justify-between mb-6">
    <h3
      class="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2"
    >
      <svg
        class="w-5 h-5 text-blue-600"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"
        ></path>
      </svg>
      Filter Sessions
    </h3>
    <button
      id="reset-filters"
      class="text-sm text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors flex items-center gap-1"
    >
      <svg
        class="w-4 h-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
        ></path>
      </svg>
      Reset All
    </button>
  </div>

  <!-- Main Filter Controls -->
  <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-4 mb-6">
    <!-- Search Input -->
    <div class="lg:col-span-2 xl:col-span-1">
      <label
        for="session-search"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
      >
        Search Sessions
      </label>
      <div class="relative">
        <div
          class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
        >
          <svg
            class="h-5 w-5 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          id="session-search"
          type="text"
          placeholder="Search titles, content, NPCs, locations..."
          class="block w-full pl-10 pr-10 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        />
        <button
          id="clear-search"
          class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 transition-colors"
          style="display: none;"
        >
          <svg
            class="h-4 w-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Session Number Range -->
    <div>
      <label
        class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
      >
        Session Number
      </label>
      <div class="flex items-center gap-2">
        <input
          id="session-min"
          type="number"
          placeholder={minSessionNumber.toString()}
          min={minSessionNumber}
          max={maxSessionNumber}
          class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        />
        <span class="text-gray-400">-</span>
        <input
          id="session-max"
          type="number"
          placeholder={maxSessionNumber.toString()}
          min={minSessionNumber}
          max={maxSessionNumber}
          class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        />
      </div>
    </div>

    <!-- Date Range -->
    <div>
      <label
        class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
      >
        Date Range
      </label>
      <div class="flex items-center gap-2">
        <input
          id="date-start"
          type="date"
          min={dateRange?.earliest
            ? dateRange.earliest.toISOString().split("T")[0]
            : ""}
          max={dateRange?.latest
            ? dateRange.latest.toISOString().split("T")[0]
            : ""}
          class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        />
        <span class="text-gray-400">-</span>
        <input
          id="date-end"
          type="date"
          min={dateRange?.earliest
            ? dateRange.earliest.toISOString().split("T")[0]
            : ""}
          max={dateRange?.latest
            ? dateRange.latest.toISOString().split("T")[0]
            : ""}
          class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        />
      </div>
    </div>

    <!-- Sort Options -->
    <div>
      <label
        for="sort-by"
        class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
      >
        Sort By
      </label>
      <select
        id="sort-by"
        class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
      >
        <option value="date-desc">Newest First</option>
        <option value="date-asc">Oldest First</option>
        <option value="session-asc">Session Number (Low to High)</option>
        <option value="session-desc">Session Number (High to Low)</option>
        <option value="title-asc">Title (A-Z)</option>
        <option value="title-desc">Title (Z-A)</option>
        <option value="combat-desc">Most Combat</option>
        <option value="xp-desc">Most Experience</option>
        <option value="duration-desc">Longest Sessions</option>
      </select>
    </div>
  </div>

  <!-- Advanced Filters (Collapsible) -->
  <div class="border-t border-gray-200 dark:border-gray-600 pt-4">
    <button
      id="toggle-advanced"
      class="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
    >
      <svg
        id="advanced-chevron"
        class="w-4 h-4 transition-transform"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
      Advanced Filters
    </button>

    <div
      id="advanced-filters"
      class="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
      style="display: none;"
    >
      <!-- Tags Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          <span class="flex items-center gap-2">
            üè∑Ô∏è Tags
            <span
              id="selected-tags-count"
              class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full"
              style="display: none;">0</span
            >
          </span>
        </label>
        <div
          class="max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md p-2 bg-white dark:bg-gray-700 space-y-1"
        >
          <div id="tag-filters"></div>
        </div>
      </div>

      <!-- Locations Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          <span class="flex items-center gap-2">
            üìç Locations
            <span
              id="selected-locations-count"
              class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full"
              style="display: none;">0</span
            >
          </span>
        </label>
        <div
          class="max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md p-2 bg-white dark:bg-gray-700 space-y-1"
        >
          <div id="location-filters"></div>
        </div>
      </div>

      <!-- Characters Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          <span class="flex items-center gap-2">
            üë• Characters
            <span
              id="selected-characters-count"
              class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full"
              style="display: none;">0</span
            >
          </span>
        </label>
        <div
          class="max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md p-2 bg-white dark:bg-gray-700 space-y-1"
        >
          <div id="character-filters"></div>
        </div>
      </div>

      <!-- NPCs Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          <span class="flex items-center gap-2">
            üèòÔ∏è NPCs
            <span
              id="selected-npcs-count"
              class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-600 px-2 py-0.5 rounded-full"
              style="display: none;">0</span
            >
          </span>
        </label>
        <div
          class="max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-md p-2 bg-white dark:bg-gray-700 space-y-1"
        >
          <div id="npc-filters"></div>
        </div>
      </div>

      <!-- Experience Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          ‚≠ê Experience Points
        </label>
        <div class="flex items-center gap-2">
          <input
            id="xp-min"
            type="number"
            placeholder="Min XP"
            min="0"
            step="50"
            class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-sm"
          />
          <span class="text-gray-400 text-sm">+</span>
        </div>
      </div>

      <!-- Combat Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          ‚öîÔ∏è Combat Encounters
        </label>
        <div class="flex items-center gap-2">
          <input
            id="combat-min"
            type="number"
            placeholder="Min"
            min="0"
            class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-sm"
          />
          <span class="text-gray-400 text-sm">+</span>
        </div>
      </div>

      <!-- Duration Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          ‚è±Ô∏è Session Duration
        </label>
        <div class="flex items-center gap-2">
          <input
            id="duration-min"
            type="number"
            placeholder="Min hours"
            min="0"
            step="0.5"
            class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors text-sm"
          />
          <span class="text-gray-400 text-sm">h+</span>
        </div>
      </div>

      <!-- Content Type Filter -->
      <div>
        <label
          class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >
          üìù Content Type
        </label>
        <div class="space-y-1">
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 p-1 rounded cursor-pointer"
          >
            <input
              type="checkbox"
              id="has-combat"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Has Combat</span>
          </label>
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 p-1 rounded cursor-pointer"
          >
            <input
              type="checkbox"
              id="has-levelup"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Level Up</span>
          </label>
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 p-1 rounded cursor-pointer"
          >
            <input
              type="checkbox"
              id="has-loot"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Has Loot</span>
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Filter Presets -->
  <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between mb-4">
      <h4 class="text-md font-semibold text-gray-900 dark:text-gray-100">
        Filter Presets
      </h4>
      <button
        id="save-current-filters"
        class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
        aria-label="Save current filter settings as a preset"
      >
        Save Current
      </button>
    </div>
    <div class="flex flex-wrap gap-2">
      <button
        class="preset-filter px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
        data-preset="recent"
        aria-label="Filter to show only recent sessions"
      >
        üìÖ Recent
      </button>
      <button
        class="preset-filter px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
        data-preset="combat-heavy"
        aria-label="Filter to show sessions with multiple combats"
      >
        ‚öîÔ∏è Combat Heavy
      </button>
      <button
        class="preset-filter px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
        data-preset="level-ups"
        aria-label="Filter to show sessions with level ups"
      >
        ‚¨ÜÔ∏è Level Ups
      </button>
      <button
        class="preset-filter px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
        data-preset="treasure"
        aria-label="Filter to show sessions with treasure found"
      >
        üí∞ Treasure
      </button>
    </div>
  </div>

  <!-- View Options -->
  <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
    <div class="flex flex-wrap items-center justify-between gap-4">
      <!-- View Controls -->
      <div class="flex flex-wrap items-center gap-4">
        <div class="flex items-center gap-2">
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300"
          >
            <input
              type="checkbox"
              id="hide-incomplete"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Hide incomplete sessions</span>
          </label>
        </div>
        <div class="flex items-center gap-2">
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300"
          >
            <input
              type="checkbox"
              id="show-featured-only"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Featured only</span>
          </label>
        </div>
        <div class="flex items-center gap-2">
          <label
            class="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300"
          >
            <input
              type="checkbox"
              id="show-recent-only"
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span>Last 30 days</span>
          </label>
        </div>
      </div>

      <!-- View Layout Toggle -->
      <div
        class="flex items-center gap-2 bg-gray-100 dark:bg-gray-700 p-1 rounded-lg"
      >
        <button
          id="grid-view-btn"
          class="flex items-center gap-1 px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300 rounded-md transition-colors"
          data-active
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
            ></path>
          </svg>
          Grid
        </button>
        <button
          id="list-view-btn"
          class="flex items-center gap-1 px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300 rounded-md transition-colors"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
          </svg>
          List
        </button>
        <button
          id="timeline-view-btn"
          class="flex items-center gap-1 px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300 rounded-md transition-colors"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5H7a2 2 0 00-2 2v6a2 2 0 002 2h2m9-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
            ></path>
          </svg>
          Timeline
        </button>
      </div>
    </div>
  </div>

  <!-- Results Info -->
  <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
    <div
      class="flex flex-wrap items-center justify-between gap-4 text-sm text-gray-600 dark:text-gray-400"
    >
      <div id="results-count" class="flex items-center gap-2">
        <svg
          class="w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
          ></path>
        </svg>
        Showing <span id="visible-count" class="font-medium">0</span> of <span
          id="total-count"
          class="font-medium">0</span
        > sessions
      </div>
      <div class="flex items-center gap-4">
        <div
          id="session-stats"
          class="hidden md:flex items-center gap-4 text-xs"
        >
          <span>üìä <span id="avg-duration">0h</span> avg</span>
          <span>‚öîÔ∏è <span id="total-combats">0</span> fights</span>
          <span>‚≠ê <span id="total-xp">0</span> XP</span>
        </div>
        <div class="text-xs text-gray-500 dark:text-gray-500">
          <span id="filter-status">All filters cleared</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    initializeFilters();
  });

  function initializeFilters() {
    // Get all filter elements
    const searchInput = document.getElementById(
      "session-search"
    ) as HTMLInputElement;
    const clearSearchBtn = document.getElementById(
      "clear-search"
    ) as HTMLButtonElement;
    const sessionMinInput = document.getElementById(
      "session-min"
    ) as HTMLInputElement;
    const sessionMaxInput = document.getElementById(
      "session-max"
    ) as HTMLInputElement;
    const dateStartInput = document.getElementById(
      "date-start"
    ) as HTMLInputElement;
    const dateEndInput = document.getElementById(
      "date-end"
    ) as HTMLInputElement;
    const sortSelect = document.getElementById("sort-by") as HTMLSelectElement;
    const xpMinInput = document.getElementById("xp-min") as HTMLInputElement;
    const combatMinInput = document.getElementById(
      "combat-min"
    ) as HTMLInputElement;
    const durationMinInput = document.getElementById(
      "duration-min"
    ) as HTMLInputElement;

    // Advanced toggle
    const advancedToggle = document.getElementById(
      "toggle-advanced"
    ) as HTMLButtonElement;
    const advancedFilters = document.getElementById(
      "advanced-filters"
    ) as HTMLDivElement;
    const advancedChevron = document.getElementById(
      "advanced-chevron"
    ) as HTMLElement;

    // View controls
    const resetButton = document.getElementById(
      "reset-filters"
    ) as HTMLButtonElement;
    const hideIncompleteCheckbox = document.getElementById(
      "hide-incomplete"
    ) as HTMLInputElement;
    const showFeaturedOnlyCheckbox = document.getElementById(
      "show-featured-only"
    ) as HTMLInputElement;
    const showRecentOnlyCheckbox = document.getElementById(
      "show-recent-only"
    ) as HTMLInputElement;
    const hasCombatCheckbox = document.getElementById(
      "has-combat"
    ) as HTMLInputElement;
    const hasLevelupCheckbox = document.getElementById(
      "has-levelup"
    ) as HTMLInputElement;
    const hasLootCheckbox = document.getElementById(
      "has-loot"
    ) as HTMLInputElement;

    // View mode buttons
    const gridViewBtn = document.getElementById(
      "grid-view-btn"
    ) as HTMLButtonElement;
    const listViewBtn = document.getElementById(
      "list-view-btn"
    ) as HTMLButtonElement;
    const timelineViewBtn = document.getElementById(
      "timeline-view-btn"
    ) as HTMLButtonElement;

    // Result displays
    const visibleCountSpan = document.getElementById(
      "visible-count"
    ) as HTMLSpanElement;
    const totalCountSpan = document.getElementById(
      "total-count"
    ) as HTMLSpanElement;
    const filterStatus = document.getElementById(
      "filter-status"
    ) as HTMLSpanElement;
    const avgDurationSpan = document.getElementById(
      "avg-duration"
    ) as HTMLSpanElement;
    const totalCombatsSpan = document.getElementById(
      "total-combats"
    ) as HTMLSpanElement;
    const totalXpSpan = document.getElementById("total-xp") as HTMLSpanElement;

    // Get all session cards
    const sessionGrid = document.getElementById("session-grid") as HTMLElement;
    const sessionCards =
      (sessionGrid?.querySelectorAll(
        "[data-date]"
      ) as NodeListOf<HTMLElement>) || [];
    const totalSessions = sessionCards.length;
    totalCountSpan.textContent = totalSessions.toString();

    // Extract unique values for filters and initialize statistics
    const allTags = new Set<string>();
    const allLocations = new Set<string>();
    const allCharacters = new Set<string>();
    const allNpcs = new Set<string>();
    let totalDuration = 0;
    let totalCombats = 0;
    let totalXp = 0;

    sessionCards.forEach((card) => {
      // Extract tags
      const tags =
        card
          .getAttribute("data-tags")
          ?.split(",")
          .filter((t) => t.trim()) || [];
      tags.forEach((tag) => allTags.add(tag.trim()));

      // Extract location
      const location = card.getAttribute("data-location");
      if (location) allLocations.add(location);

      // Extract characters
      const characters =
        card
          .getAttribute("data-characters")
          ?.split(",")
          .filter((c) => c.trim()) || [];
      characters.forEach((char) => allCharacters.add(char.trim()));

      // Extract NPCs
      const npcs =
        card
          .getAttribute("data-npcs")
          ?.split(",")
          .filter((n) => n.trim()) || [];
      npcs.forEach((npc) => allNpcs.add(npc.trim()));

      // Calculate stats
      const duration = parseFloat(card.getAttribute("data-duration") || "0");
      const combats = parseInt(card.getAttribute("data-combat-count") || "0");
      const xp = parseInt(card.getAttribute("data-xp") || "0");

      totalDuration += duration;
      totalCombats += combats;
      totalXp += xp;
    });

    // Update initial stats
    if (avgDurationSpan)
      avgDurationSpan.textContent =
        totalSessions > 0
          ? `${(totalDuration / totalSessions).toFixed(1)}h`
          : "0h";
    if (totalCombatsSpan)
      totalCombatsSpan.textContent = totalCombats.toString();
    if (totalXpSpan) totalXpSpan.textContent = totalXp.toString();

    // Populate filter options
    populateFilterOptions();

    // Search input enhancements
    searchInput?.addEventListener("input", () => {
      const hasValue = searchInput.value.length > 0;
      if (clearSearchBtn) {
        clearSearchBtn.style.display = hasValue ? "flex" : "none";
      }
      applyFilters();
    });

    clearSearchBtn?.addEventListener("click", () => {
      searchInput.value = "";
      clearSearchBtn.style.display = "none";
      applyFilters();
    });

    // Advanced filters toggle
    advancedToggle?.addEventListener("click", () => {
      const isHidden = advancedFilters.style.display === "none";
      if (isHidden) {
        advancedFilters.style.display = "grid";
        advancedChevron.style.transform = "rotate(90deg)";
        localStorage.setItem("journalFiltersAdvanced", "open");
      } else {
        advancedFilters.style.display = "none";
        advancedChevron.style.transform = "rotate(0deg)";
        localStorage.setItem("journalFiltersAdvanced", "closed");
      }
    });

    // Restore advanced filters state
    const advancedState = localStorage.getItem("journalFiltersAdvanced");
    if (advancedState === "open") {
      advancedFilters.style.display = "grid";
      advancedChevron.style.transform = "rotate(90deg)";
    }

    // View toggle
    gridViewBtn?.addEventListener("click", () => setViewMode("grid"));
    listViewBtn?.addEventListener("click", () => setViewMode("list"));
    timelineViewBtn?.addEventListener("click", () => setViewMode("timeline"));

    // Reset filters
    resetButton?.addEventListener("click", () => {
      searchInput.value = "";
      if (clearSearchBtn) clearSearchBtn.style.display = "none";
      sessionMinInput.value = "";
      sessionMaxInput.value = "";
      dateStartInput.value = "";
      dateEndInput.value = "";
      xpMinInput.value = "";
      combatMinInput.value = "";
      durationMinInput.value = "";
      sortSelect.value = "date-desc";
      hideIncompleteCheckbox.checked = false;
      showFeaturedOnlyCheckbox.checked = false;
      showRecentOnlyCheckbox.checked = false;
      hasCombatCheckbox.checked = false;
      hasLevelupCheckbox.checked = false;
      hasLootCheckbox.checked = false;

      // Reset filter checkboxes
      document
        .querySelectorAll('input[type="checkbox"][name*="filter"]')
        .forEach((checkbox) => {
          (checkbox as HTMLInputElement).checked = false;
        });

      updateFilterCounts();
      applyFilters();
    });

    // Add event listeners for all filter inputs
    const allInputs = [
      searchInput,
      sessionMinInput,
      sessionMaxInput,
      dateStartInput,
      dateEndInput,
      sortSelect,
      xpMinInput,
      combatMinInput,
      durationMinInput,
      hideIncompleteCheckbox,
      showFeaturedOnlyCheckbox,
      showRecentOnlyCheckbox,
      hasCombatCheckbox,
      hasLevelupCheckbox,
      hasLootCheckbox,
    ];

    allInputs.forEach((input) => {
      if (input) {
        input.addEventListener("input", applyFilters);
        input.addEventListener("change", applyFilters);
      }
    });

    function populateFilterOptions() {
      // Populate tags
      const tagContainer = document.getElementById("tag-filters");
      if (tagContainer && allTags.size > 0) {
        Array.from(allTags)
          .sort()
          .forEach((tag) => {
            const label = createFilterCheckbox(tag, "tag-filter");
            tagContainer.appendChild(label);
          });
      }

      // Populate locations
      const locationContainer = document.getElementById("location-filters");
      if (locationContainer && allLocations.size > 0) {
        Array.from(allLocations)
          .sort()
          .forEach((location) => {
            const label = createFilterCheckbox(location, "location-filter");
            locationContainer.appendChild(label);
          });
      }

      // Populate characters
      const characterContainer = document.getElementById("character-filters");
      if (characterContainer && allCharacters.size > 0) {
        Array.from(allCharacters)
          .sort()
          .forEach((character) => {
            const label = createFilterCheckbox(character, "character-filter");
            characterContainer.appendChild(label);
          });
      }

      // Populate NPCs
      const npcContainer = document.getElementById("npc-filters");
      if (npcContainer && allNpcs.size > 0) {
        Array.from(allNpcs)
          .sort()
          .forEach((npc) => {
            const label = createFilterCheckbox(npc, "npc-filter");
            npcContainer.appendChild(label);
          });
      }

      // Add event listeners for checkboxes
      document
        .querySelectorAll('input[type="checkbox"][name*="filter"]')
        .forEach((checkbox) => {
          checkbox.addEventListener("change", () => {
            updateFilterCounts();
            applyFilters();
          });
        });
    }

    function createFilterCheckbox(value: string, name: string): HTMLElement {
      const label = document.createElement("label");
      label.className =
        "flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 p-1 rounded cursor-pointer transition-colors";

      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.value = value;
      checkbox.name = name;
      checkbox.className =
        "rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500";

      const span = document.createElement("span");
      span.className = "truncate";
      span.textContent = value;

      label.appendChild(checkbox);
      label.appendChild(span);

      return label;
    }

    function updateFilterCounts() {
      const filterTypes = [
        {
          selector: 'input[name="tag-filter"]:checked',
          countId: "selected-tags-count",
        },
        {
          selector: 'input[name="location-filter"]:checked',
          countId: "selected-locations-count",
        },
        {
          selector: 'input[name="character-filter"]:checked',
          countId: "selected-characters-count",
        },
        {
          selector: 'input[name="npc-filter"]:checked',
          countId: "selected-npcs-count",
        },
      ];

      filterTypes.forEach(({ selector, countId }) => {
        const count = document.querySelectorAll(selector).length;
        const countElement = document.getElementById(countId);
        if (countElement) {
          if (count > 0) {
            countElement.textContent = count.toString();
            countElement.style.display = "inline";
          } else {
            countElement.style.display = "none";
          }
        }
      });
    }

    function setViewMode(mode: "grid" | "list" | "timeline") {
      // Reset all button styles
      [gridViewBtn, listViewBtn, timelineViewBtn].forEach((btn) => {
        if (btn) {
          btn.classList.remove(
            "bg-white",
            "dark:bg-gray-800",
            "text-blue-600",
            "shadow-sm"
          );
          btn.classList.add("text-gray-700", "dark:text-gray-300");
        }
      });

      // Set active button
      let activeBtn;
      switch (mode) {
        case "grid":
          activeBtn = gridViewBtn;
          if (sessionGrid) {
            sessionGrid.className =
              "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6";
          }
          break;
        case "list":
          activeBtn = listViewBtn;
          if (sessionGrid) {
            sessionGrid.className = "flex flex-col gap-4";
          }
          break;
        case "timeline":
          activeBtn = timelineViewBtn;
          if (sessionGrid) {
            sessionGrid.className = "space-y-8";
          }
          break;
      }

      if (activeBtn) {
        activeBtn.classList.add(
          "bg-white",
          "dark:bg-gray-800",
          "text-blue-600",
          "shadow-sm"
        );
        activeBtn.classList.remove("text-gray-700", "dark:text-gray-300");
      }

      localStorage.setItem("journalViewMode", mode);
    }

    function applyFilters() {
      const searchTerm = searchInput?.value.toLowerCase() || "";
      const sessionMin = sessionMinInput?.value
        ? parseInt(sessionMinInput.value)
        : null;
      const sessionMax = sessionMaxInput?.value
        ? parseInt(sessionMaxInput.value)
        : null;
      const dateStart = dateStartInput?.value
        ? new Date(dateStartInput.value)
        : null;
      const dateEnd = dateEndInput?.value ? new Date(dateEndInput.value) : null;
      const xpMin = xpMinInput?.value ? parseInt(xpMinInput.value) : null;
      const combatMin = combatMinInput?.value
        ? parseInt(combatMinInput.value)
        : null;
      const durationMin = durationMinInput?.value
        ? parseFloat(durationMinInput.value)
        : null;

      const hideIncomplete = hideIncompleteCheckbox?.checked || false;
      const showFeaturedOnly = showFeaturedOnlyCheckbox?.checked || false;
      const showRecentOnly = showRecentOnlyCheckbox?.checked || false;
      const hasCombat = hasCombatCheckbox?.checked || false;
      const hasLevelup = hasLevelupCheckbox?.checked || false;
      const hasLoot = hasLootCheckbox?.checked || false;

      // Get selected filters
      const selectedTags = Array.from(
        document.querySelectorAll('input[name="tag-filter"]:checked')
      ).map((cb) => (cb as HTMLInputElement).value);
      const selectedLocations = Array.from(
        document.querySelectorAll('input[name="location-filter"]:checked')
      ).map((cb) => (cb as HTMLInputElement).value);
      const selectedCharacters = Array.from(
        document.querySelectorAll('input[name="character-filter"]:checked')
      ).map((cb) => (cb as HTMLInputElement).value);
      const selectedNpcs = Array.from(
        document.querySelectorAll('input[name="npc-filter"]:checked')
      ).map((cb) => (cb as HTMLInputElement).value);

      let visibleSessions = 0;
      const sessionsArray = Array.from(sessionCards);
      let activeFilters: string[] = [];
      let filteredDuration = 0;
      let filteredCombats = 0;
      let filteredXp = 0;

      // Get current date for recent filter
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      // Filter sessions
      sessionsArray.forEach((card) => {
        let isVisible = true;

        // Search filter
        if (searchTerm) {
          const cardText = card.textContent?.toLowerCase() || "";
          if (!cardText.includes(searchTerm)) {
            isVisible = false;
          }
          if (searchTerm && !activeFilters.includes("search"))
            activeFilters.push("search");
        }

        // Session number filter
        const sessionNumberElement = card.querySelector(
          "[data-session-number]"
        );
        const sessionNumber = sessionNumberElement
          ? parseInt(
              sessionNumberElement.getAttribute("data-session-number") || "0"
            )
          : 0;

        if (sessionMin !== null && sessionNumber < sessionMin) {
          isVisible = false;
          if (!activeFilters.includes("session range"))
            activeFilters.push("session range");
        }
        if (sessionMax !== null && sessionNumber > sessionMax) {
          isVisible = false;
          if (!activeFilters.includes("session range"))
            activeFilters.push("session range");
        }

        // Date filter
        const cardDate = card.getAttribute("data-date");
        if (cardDate) {
          const sessionDate = new Date(cardDate);
          if (dateStart && sessionDate < dateStart) {
            isVisible = false;
            if (!activeFilters.includes("date range"))
              activeFilters.push("date range");
          }
          if (dateEnd && sessionDate > dateEnd) {
            isVisible = false;
            if (!activeFilters.includes("date range"))
              activeFilters.push("date range");
          }

          // Recent filter
          if (showRecentOnly && sessionDate < thirtyDaysAgo) {
            isVisible = false;
            if (!activeFilters.includes("recent")) activeFilters.push("recent");
          }
        }

        // Experience filter
        if (xpMin !== null) {
          const cardXp = parseInt(card.getAttribute("data-xp") || "0");
          if (cardXp < xpMin) {
            isVisible = false;
            if (!activeFilters.includes("XP")) activeFilters.push("XP");
          }
        }

        // Combat filter
        if (combatMin !== null) {
          const cardCombat = parseInt(
            card.getAttribute("data-combat-count") || "0"
          );
          if (cardCombat < combatMin) {
            isVisible = false;
            if (!activeFilters.includes("combat count"))
              activeFilters.push("combat count");
          }
        }

        // Duration filter
        if (durationMin !== null) {
          const cardDuration = parseFloat(
            card.getAttribute("data-duration") || "0"
          );
          if (cardDuration < durationMin) {
            isVisible = false;
            if (!activeFilters.includes("duration"))
              activeFilters.push("duration");
          }
        }

        // Content type filters
        if (hasCombat) {
          const cardCombat = parseInt(
            card.getAttribute("data-combat-count") || "0"
          );
          if (cardCombat === 0) {
            isVisible = false;
            if (!activeFilters.includes("has combat"))
              activeFilters.push("has combat");
          }
        }

        if (hasLevelup) {
          const cardLevelup = card.getAttribute("data-has-levelup") === "true";
          if (!cardLevelup) {
            isVisible = false;
            if (!activeFilters.includes("level up"))
              activeFilters.push("level up");
          }
        }

        if (hasLoot) {
          const cardLoot = card.getAttribute("data-has-loot") === "true";
          if (!cardLoot) {
            isVisible = false;
            if (!activeFilters.includes("has loot"))
              activeFilters.push("has loot");
          }
        }

        // Tag filter
        if (selectedTags.length > 0) {
          const cardTags = (card.getAttribute("data-tags") || "").split(",");
          const hasSelectedTag = selectedTags.some((tag) =>
            cardTags.includes(tag)
          );
          if (!hasSelectedTag) isVisible = false;
          if (!activeFilters.includes("tags")) activeFilters.push("tags");
        }

        // Location filter
        if (selectedLocations.length > 0) {
          const cardLocation = card.getAttribute("data-location") || "";
          if (!selectedLocations.includes(cardLocation)) isVisible = false;
          if (!activeFilters.includes("locations"))
            activeFilters.push("locations");
        }

        // Character filter
        if (selectedCharacters.length > 0) {
          const cardCharacters = (
            card.getAttribute("data-characters") || ""
          ).split(",");
          const hasSelectedCharacter = selectedCharacters.some((char) =>
            cardCharacters.includes(char)
          );
          if (!hasSelectedCharacter) isVisible = false;
          if (!activeFilters.includes("characters"))
            activeFilters.push("characters");
        }

        // NPC filter
        if (selectedNpcs.length > 0) {
          const cardNpcs = (card.getAttribute("data-npcs") || "").split(",");
          const hasSelectedNpc = selectedNpcs.some((npc) =>
            cardNpcs.includes(npc)
          );
          if (!hasSelectedNpc) isVisible = false;
          if (!activeFilters.includes("NPCs")) activeFilters.push("NPCs");
        }

        // Incomplete filter
        if (hideIncomplete) {
          const isIncomplete = card.classList.contains("incomplete-session");
          if (isIncomplete) isVisible = false;
          if (!activeFilters.includes("hide incomplete"))
            activeFilters.push("hide incomplete");
        }

        // Featured filter
        if (showFeaturedOnly) {
          const isFeatured = card.classList.contains("featured-session");
          if (!isFeatured) isVisible = false;
          if (!activeFilters.includes("featured only"))
            activeFilters.push("featured only");
        }

        // Apply visibility and collect stats
        if (isVisible) {
          card.style.display = "";
          visibleSessions++;

          // Collect filtered stats
          filteredDuration += parseFloat(
            card.getAttribute("data-duration") || "0"
          );
          filteredCombats += parseInt(
            card.getAttribute("data-combat-count") || "0"
          );
          filteredXp += parseInt(card.getAttribute("data-xp") || "0");
        } else {
          card.style.display = "none";
        }
      });

      // Sort visible sessions
      const sortBy = sortSelect?.value || "date-desc";
      const visibleCards = sessionsArray.filter(
        (card) => card.style.display !== "none"
      );

      visibleCards.sort((a, b) => {
        switch (sortBy) {
          case "date-asc":
            return (
              new Date(a.getAttribute("data-date") || "").getTime() -
              new Date(b.getAttribute("data-date") || "").getTime()
            );
          case "date-desc":
            return (
              new Date(b.getAttribute("data-date") || "").getTime() -
              new Date(a.getAttribute("data-date") || "").getTime()
            );
          case "session-asc":
            return (
              parseInt(
                a
                  .querySelector("[data-session-number]")
                  ?.getAttribute("data-session-number") || "0"
              ) -
              parseInt(
                b
                  .querySelector("[data-session-number]")
                  ?.getAttribute("data-session-number") || "0"
              )
            );
          case "session-desc":
            return (
              parseInt(
                b
                  .querySelector("[data-session-number]")
                  ?.getAttribute("data-session-number") || "0"
              ) -
              parseInt(
                a
                  .querySelector("[data-session-number]")
                  ?.getAttribute("data-session-number") || "0"
              )
            );
          case "title-asc":
            return (a.querySelector("h3")?.textContent || "").localeCompare(
              b.querySelector("h3")?.textContent || ""
            );
          case "title-desc":
            return (b.querySelector("h3")?.textContent || "").localeCompare(
              a.querySelector("h3")?.textContent || ""
            );
          case "combat-desc":
            return (
              parseInt(b.getAttribute("data-combat-count") || "0") -
              parseInt(a.getAttribute("data-combat-count") || "0")
            );
          case "xp-desc":
            return (
              parseInt(b.getAttribute("data-xp") || "0") -
              parseInt(a.getAttribute("data-xp") || "0")
            );
          case "duration-desc":
            return (
              parseFloat(b.getAttribute("data-duration") || "0") -
              parseFloat(a.getAttribute("data-duration") || "0")
            );
          default:
            return 0;
        }
      });

      // Reorder DOM elements
      if (sessionGrid) {
        visibleCards.forEach((card) => sessionGrid.appendChild(card));
      }

      // Update count and status
      if (visibleCountSpan)
        visibleCountSpan.textContent = visibleSessions.toString();

      // Update filtered stats
      if (avgDurationSpan) {
        avgDurationSpan.textContent =
          visibleSessions > 0
            ? `${(filteredDuration / visibleSessions).toFixed(1)}h`
            : "0h";
      }
      if (totalCombatsSpan)
        totalCombatsSpan.textContent = filteredCombats.toString();
      if (totalXpSpan) totalXpSpan.textContent = filteredXp.toString();

      if (filterStatus) {
        if (activeFilters.length === 0) {
          filterStatus.textContent = "All filters cleared";
        } else {
          filterStatus.textContent = `Active: ${activeFilters.join(", ")}`;
        }
      }
    }

    // Initialize view mode from localStorage
    const savedViewMode =
      (localStorage.getItem("journalViewMode") as
        | "grid"
        | "list"
        | "timeline") || "grid";
    setViewMode(savedViewMode);

    // Initial application of filters
    updateFilterCounts();
    applyFilters();
  }
</script>
