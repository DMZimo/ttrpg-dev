---
import { Image } from "astro:assets";
import FormattedDate from "@/components/layout/FormattedDate.astro";
import HoloCard from "@/components/ui/HoloCard.astro";

interface Props {
  entry: any;
  featured?: boolean;
}

const { entry, featured = false } = Astro.props;

// Use session_title if available, otherwise fall back to title or generate from session_number
const displayTitle =
  entry.data.session_title ||
  entry.data.title ||
  (entry.data.session_number
    ? `Session ${entry.data.session_number}`
    : "Untitled Session");

// Use session_start if available, otherwise fall back to publish_date_iso
const displayDate = entry.data.session_start || entry.data.publish_date_iso;

// Calculate session statistics
const combatCount = entry.data.combat_encounters?.length || 0;
const xpGained =
  entry.data.characters_involved?.reduce((total: number, char: any) => {
    return (
      total +
      (char.rewards?.reduce((sum: number, reward: any) => {
        return sum + (reward.experience || 0);
      }, 0) || 0)
    );
  }, 0) || 0;
const hasLevelup = entry.data.level_ups && entry.data.level_ups.length > 0;
const hasLoot = entry.data.group_rewards && entry.data.group_rewards.length > 0;
const sessionDuration =
  entry.data.session_end && entry.data.session_start
    ? (entry.data.session_end.getTime() - entry.data.session_start.getTime()) /
      (1000 * 60 * 60)
    : 0;
---

<HoloCard
  backgroundImage={entry.data.heroImage?.src ||
    "/images/default-session-bg.jpg"}
  backgroundOpacity={0.4}
  class={`group rounded-2xl shadow-card hover:shadow-card-hover transition-all duration-300 overflow-hidden border border-primary hover:border-accent-400 ${
    featured ? "md:col-span-2 lg:col-span-3" : ""
  }`}
>
  <a href={`/journal/${entry.id}/`} class="block h-full">
    <div class="relative h-full min-h-[320px] flex flex-col">
      {
        entry.data.heroImage && (
          <div class="relative h-48 overflow-hidden flex-shrink-0">
            {entry.data.session_number && (
              <div
                class="absolute top-4 left-4 px-4 py-2 rounded-full text-sm font-bold session-number shadow-lg z-10"
                style="background: linear-gradient(135deg, rgb(var(--accent-600)), rgb(var(--accent-500))); color: white;"
              >
                Session {entry.data.session_number}
              </div>
            )}
          </div>
        )
      }

      <div class="p-6 flex-1 flex flex-col">
        <div class="flex items-start justify-between mb-4">
          <h3
            class={`font-bold text-primary group-hover:text-accent-600 transition-colors leading-tight ${
              featured ? "text-2xl" : "text-xl"
            }`}
          >
            {displayTitle}
          </h3>
          {
            !entry.data.heroImage && entry.data.session_number && (
              <span
                class="px-3 py-1 rounded-full text-sm font-bold session-number border flex-shrink-0"
                style="background: rgba(var(--accent-100), 0.8); color: rgb(var(--accent-700)); border-color: rgba(var(--accent-300), 0.5);"
              >
                Session {entry.data.session_number}
              </span>
            )
          }
        </div>

        {
          displayDate && (
            <p class="text-tertiary text-sm mb-4 flex items-center gap-2">
              <svg
                class="w-4 h-4 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                />
              </svg>
              <FormattedDate date={displayDate} />
            </p>
          )
        }

        {
          entry.data.description && (
            <p
              class="text-secondary text-sm mb-6 session-description leading-relaxed flex-1"
              style="display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden;"
            >
              {entry.data.description}
            </p>
          )
        }

        {
          entry.data.tags && entry.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-4">
              {entry.data.tags.slice(0, 3).map((tag: string) => (
                <span
                  class="px-2 py-1 rounded-full text-xs font-medium tag-item border transition-colors hover:scale-105"
                  style="background: rgba(var(--accent-50), 0.5); color: rgb(var(--accent-700)); border-color: rgba(var(--accent-200), 0.5);"
                >
                  {tag}
                </span>
              ))}
              {entry.data.tags.length > 3 && (
                <span class="text-tertiary text-xs self-center font-medium">
                  +{entry.data.tags.length - 3} more
                </span>
              )}
            </div>
          )
        }

        {/* Session Statistics */}
        <div
          class="flex flex-wrap gap-3 mb-4 text-xs text-gray-600 dark:text-gray-400"
        >
          {
            sessionDuration > 0 && (
              <div class="flex items-center gap-1">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span>{sessionDuration.toFixed(1)}h</span>
              </div>
            )
          }
          {
            combatCount > 0 && (
              <div class="flex items-center gap-1">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"
                  />
                </svg>
                <span>
                  {combatCount} combat{combatCount > 1 ? "s" : ""}
                </span>
              </div>
            )
          }
          {
            xpGained > 0 && (
              <div class="flex items-center gap-1">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
                  />
                </svg>
                <span>{xpGained} XP</span>
              </div>
            )
          }
          {
            hasLevelup && (
              <div class="flex items-center gap-1 text-green-600 dark:text-green-400">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                  />
                </svg>
                <span class="font-medium">Level Up!</span>
              </div>
            )
          }
          {
            hasLoot && (
              <div class="flex items-center gap-1 text-yellow-600 dark:text-yellow-400">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                  />
                </svg>
                <span class="font-medium">Treasure</span>
              </div>
            )
          }
          {
            entry.data.primary_location && (
              <div class="flex items-center gap-1">
                <svg
                  class="w-3 h-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                  />
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                  />
                </svg>
                <span class="truncate">{entry.data.primary_location}</span>
              </div>
            )
          }
        </div>

        <div class="mt-auto pt-4 border-t border-secondary">
          <div class="flex items-center justify-between">
            <span class="text-secondary text-sm font-medium">Read Session</span>
            <svg
              class="w-5 h-5 text-tertiary group-hover:text-accent-500 group-hover:translate-x-1 transition-all"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </a>
</HoloCard>
