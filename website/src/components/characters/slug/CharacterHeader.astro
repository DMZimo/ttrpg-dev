---
import type { Character } from "../../../types/characterTypes";

import CharacterHistory from "@/components/characters/slug/CharacterHistory.astro";
import acBadge from "@/assets/ui/badge-ac.webp";
import hpBadge from "@/assets/ui/badge-hp.webp";
import mrBadge from "@/assets/ui/badge-mr.webp";

interface Props {
  character: Character;
  variant?: "default" | "compact" | "detailed";
}

const { character, variant = "default" } = Astro.props;
const { data } = character;

// Determine card styling based on character type and custom color
function getCardStyling() {
  // Use custom color if available
  if (data.color) {
    // For custom colors, we'll use a neutral base and rely on CSS custom properties or inline styles
    return {
      border: "border-primary",
      gradient: "bg-surface-secondary",
      accent: "text-primary",
      tagColor: "bg-surface-tertiary text-secondary",
      customColor: data.color,
    };
  }

  // Fallback to type-based styling
  switch (data.type) {
    case "pc":
      return {
        border: "border-primary",
        gradient: "bg-surface-secondary",
        accent: "text-primary",
        tagColor: "bg-surface-tertiary text-secondary",
      };
    case "npc":
      if (data.tags?.includes("villain") || data.tags?.includes("antagonist")) {
        return {
          border: "border-primary",
          gradient: "bg-surface-secondary",
          accent: "text-primary",
          tagColor: "bg-surface-tertiary text-secondary",
        };
      } else if (data.tags?.includes("red-larch")) {
        return {
          border: "border-primary",
          gradient: "bg-surface-secondary",
          accent: "text-primary",
          tagColor: "bg-surface-tertiary text-secondary",
        };
      }
      return {
        border: "border-primary",
        gradient: "bg-surface-secondary",
        accent: "text-primary",
        tagColor: "bg-surface-tertiary text-secondary",
      };
    default:
      return {
        border: "border-primary",
        gradient: "bg-surface",
        accent: "text-tertiary",
        tagColor: "bg-surface-tertiary text-secondary",
      };
  }
}

function getStatusIcon() {
  switch (data.status) {
    case "alive":
      return "💚";
    case "dead":
      return "💀";
    case "missing":
      return "❓";
    case "retired":
      return "🏠";
    case "inactive":
      return "💤";
    default:
      return "❔";
  }
}

// Get portrait image path
function getPortraitPath() {
  if (data.portrait) {
    return `/src/assets/portraits/${data.portrait}`;
  }

  // Fallback to placeholder
  return "/src/assets/portraits/placeholder-portrait.png";
}

// Get enclave banner for enclave affiliation
function getEnclaveBanner() {
  // Check enclave field first
  if (data.enclave) {
    const enclaveName = data.enclave.name.toLowerCase();
    switch (enclaveName) {
      case "emerald enclave":
        return "/src/assets/banners/emerald-enclave-banner.svg";
      case "harpers":
        return "/src/assets/banners/harpers-banner.svg";
      case "lords' alliance":
      case "lords alliance":
      case "lord's alliance": // Added this variant to catch common typo
        return "/src/assets/banners/lords-alliance-banner.svg";
      case "order of the gauntlet":
        return "/src/assets/banners/order-of-the-gauntlet-banner.svg";
      case "zhentarim":
        return "/src/assets/banners/zhentarim-banner.svg";
      default:
        return "/src/assets/banners/unknown-banner.svg";
    }
  }

  // Check organization field as fallback
  if (data.organization) {
    const orgName = data.organization.name.toLowerCase();
    switch (orgName) {
      case "emerald enclave":
        return "/src/assets/banners/emerald-enclave-banner.svg";
      case "harpers":
        return "/src/assets/banners/harpers-banner.svg";
      case "lords' alliance":
      case "lords alliance":
      case "lord's alliance": // Added this variant to catch common typo
        return "/src/assets/banners/lords-alliance-banner.svg";
      case "order of the gauntlet":
        return "/src/assets/banners/order-of-the-gauntlet-banner.svg";
      case "zhentarim":
        return "/src/assets/banners/zhentarim-banner.svg";
      default:
        return "/src/assets/banners/unknown-banner.svg";
    }
  }

  // Check tags for enclave affiliation
  if (data.tags) {
    if (data.tags.includes("emerald-enclave")) {
      return "/src/assets/banners/emerald-enclave-banner.svg";
    }
    if (data.tags.includes("harpers")) {
      return "/src/assets/banners/harpers-banner.svg";
    }
    if (data.tags.includes("lords-alliance")) {
      return "/src/assets/banners/lords-alliance-banner.svg";
    }
    if (data.tags.includes("order-of-the-gauntlet")) {
      return "/src/assets/banners/order-of-the-gauntlet-banner.svg";
    }
    if (data.tags.includes("zhentarim")) {
      return "/src/assets/banners/zhentarim-banner.svg";
    }
  }

  // Return the unknown banner as fallback when no enclave is specified
  return "/src/assets/banners/unknown-banner.svg";
}

// Get cult icon for cult members
function getCultIcon() {
  if (!data.cult?.name) return null;

  const cultName = data.cult.name;

  switch (cultName) {
    case "Fire":
      return "/src/assets/icons/cult-icon-fire.svg";
    case "Water":
      return "/src/assets/icons/cult-icon-water.svg";
    case "Air":
      return "/src/assets/icons/cult-icon-air.svg";
    case "Earth":
      return "/src/assets/icons/cult-icon-earth.svg";
    case "Eye":
      // No icon for Eye cult yet, could add one later
      return null;
    default:
      return null;
  }
}

// Get class icon for character classes
function getClassIcon(className: string) {
  const classNameLower = className.toLowerCase();
  // Handle special case for "Commoner" which doesn't have a standard D&D class icon
  if (classNameLower === "commoner") {
    return `/src/assets/icons/class-icon-fighter.svg`; // Use fighter as fallback
  }
  return `/src/assets/icons/class-icon-${classNameLower}.svg`;
}

// Get role icon for character roles
function getRoleIcon(roleName: string) {
  const roleNameLower = roleName.toLowerCase();
  return `/src/assets/icons/role-icon-${roleNameLower}.png`;
}

// Get current level for display (cumulative)
function getCurrentLevel() {
  const classes = data.classes || data.class || [];
  if (classes.length > 0) {
    return classes.reduce((total, classInfo) => total + classInfo.level, 0);
  }
  return null;
}

// Get all classes with levels
function getAllClasses() {
  return data.classes || data.class || [];
}

// Get ordinal suffix for numbers (1st, 2nd, 3rd, etc.)
function getOrdinalSuffix(num: number): string {
  const j = num % 10;
  const k = num % 100;
  if (j === 1 && k !== 11) {
    return num + "st";
  }
  if (j === 2 && k !== 12) {
    return num + "nd";
  }
  if (j === 3 && k !== 13) {
    return num + "rd";
  }
  return num + "th";
}

// Get ability score modifier
function getAbilityModifier(score: number) {
  return Math.floor((score - 10) / 2);
}

// Format ability modifier with + or - sign
function formatModifier(modifier: number) {
  return modifier >= 0 ? `+${modifier}` : `${modifier}`;
}

const styling = getCardStyling();
const enclaveBanner = getEnclaveBanner();
const cultIcon = getCultIcon();
const currentLevel = getCurrentLevel();
const allClasses = getAllClasses();
---

<div
  class={`flex flex-col h-40 w-120 rounded-2xl rounded-tl-[120px]
  ${styling.gradient} ${styling.border} border 
  ${data.type === "pc" ? "shadow-lg" : "shadow"} 
  transition-all duration-300 transform backdrop-blur-sm
`}
  style={styling.customColor
    ? `border-color: ${styling.customColor}40; 
     background: linear-gradient(135deg, ${styling.customColor}10, ${styling.customColor}50); 
     ${data.type === "pc" ? `box-shadow: 0 10px 15px -3px ${styling.customColor}40, 0 4px 6px -2px ${styling.customColor}20;` : ""}`
    : data.type === "pc"
      ? "box-shadow: 0 10px 15px -3px rgb(217 119 6 / 0.25), 0 4px 6px -2px rgb(217 119 6 / 0.125);"
      : ""}
>
  <div class="flex gap-4 relative">
    {/* Avatar positioned at top left */}
    <div
      class={`rounded-full z-10 ${data.type === "pc" ? "shadow-lg" : ""}`}
      style={data.type === "pc" && data.color
        ? `box-shadow: 0 10px 15px -3px ${data.color}40, 0 4px 6px -2px ${data.color}20;`
        : data.type === "pc"
          ? "box-shadow: 0 10px 15px -3px rgb(217 119 6 / 0.25), 0 4px 6px -2px rgb(217 119 6 / 0.125);"
          : ""}
    >
      <div class="relative">
        <img
          src="/src/assets/ui/portrait-background.png"
          alt="portrait background"
          class={"absolute inset-0 w-full h-full rounded-full"}
        />

        <div class="relative w-32 h-32">
          <img
            src={getPortraitPath()}
            alt={`${data.name} portrait`}
            class={`w-full h-full rounded-full object-cover object-top ${
              data.type === "pc" ? "ring-2 ring-amber-500 ring-opacity-70" : ""
            }`}
            style={data.type === "pc" && data.color
              ? `--tw-ring-color: ${data.color}B3;` // Using B3 for 70% opacity
              : ""}
            onerror="this.src='/src/assets/portraits/placeholder-portrait.png'"
          />
          {/* Death Overlay - Only show if character is dead */}
          {
            data.status === "dead" && (
              <img
                src="/src/assets/ui/portrait-overlay-death.png"
                alt="Death overlay"
                class="absolute inset-0 w-full h-full object-cover rounded-full pointer-events-none"
              />
            )
          }
          {/* Portrait Frame Overlay based on character type */}
          <img
            src={data.type === "pc"
              ? "/src/assets/ui/portrait-frame-pc.png"
              : data.type === "npc"
                ? "/src/assets/ui/portrait-frame-npc.png"
                : "/src/assets/ui/portrait-frame-sidekick.png"}
            alt={`${data.type.toUpperCase()} portrait frame`}
            class="absolute inset-0 w-full h-full object-cover pointer-events-none"
          />
        </div>

        {/* Level Badge - Top Left */}
        {
          currentLevel && (
            <div class="absolute -top-1 -right-2 flex items-center">
              <div class="relative">
                <img
                  src="/src/assets/ui/level-badge.webp"
                  alt="Level Badge"
                  class="w-12 h-12 drop-shadow-md"
                />
                <span class="absolute inset-0 flex items-center justify-center text-white font-bold text-xs">
                  {currentLevel}
                </span>
              </div>
            </div>
          )
        }

        {/* Status Icon - Only show if not alive and not dead - Top Right */}
        {
          data.status !== "alive" && data.status !== "dead" && (
            <div class="absolute -top-1 -left-1 text-lg bg-surface-elevated rounded-full p-1 shadow-md">
              <span title={`Status: ${data.status}`}>{getStatusIcon()}</span>
            </div>
          )
        }

        {/* Cult Icon - Bottom Center */}
        {
          cultIcon && (
            <div class="absolute -bottom-4 left-1/2 transform -translate-x-1/2 w-12 h-12 shadow-md">
              <div class="relative w-full h-full">
                {/* Background with cult-specific color */}
                <div
                  class={`absolute inset-0 rounded-full ${
                    data.cult?.name === "Fire"
                      ? "bg-red-400"
                      : data.cult?.name === "Water"
                        ? "bg-blue-400"
                        : data.cult?.name === "Air"
                          ? "bg-sky-300"
                          : data.cult?.name === "Earth"
                            ? "bg-yellow-400"
                            : "bg-gray-400"
                  }`}
                />
                {/* Cult Icon */}
                <img
                  src={cultIcon}
                  alt="Cult affiliation"
                  class="absolute inset-0 w-full h-full object-contain py-3 px-0.5"
                  title={
                    data.cult?.name
                      ? `${data.cult.name} Cult`
                      : "Cult Affiliation"
                  }
                />
                {/* Frame Overlay */}
                <img
                  src="/src/assets/ui/cult-icon-frame.webp"
                  alt="Cult icon frame"
                  class="absolute inset-0 w-full h-full object-cover pointer-events-none"
                />
                {/* Frame Color Overlay */}
                <div
                  class={`absolute inset-0 rounded-full pointer-events-none mix-blend-multiply ${
                    data.cult?.name === "Fire"
                      ? "bg-red-400"
                      : data.cult?.name === "Water"
                        ? "bg-blue-400"
                        : data.cult?.name === "Air"
                          ? "bg-sky-300"
                          : data.cult?.name === "Earth"
                            ? "bg-yellow-400"
                            : "bg-violet-400"
                  }`}
                />
              </div>
            </div>
          )
        }
      </div>

      {/* Enclave Banner - Below Avatar */}
      {
        enclaveBanner && (
          <div class="absolute top-[70px] left-0 -z-10">
            <img
              src={enclaveBanner}
              alt="Enclave banner"
              class={`w-32 h-auto object-contain ${
                data.type === "pc" ? "drop-shadow-md" : "drop-shadow-sm"
              }`}
              style={
                data.type === "pc" && data.color
                  ? `filter: drop-shadow(0 4px 3px ${data.color}30);`
                  : ""
              }
            />
          </div>
        )
      }
    </div>
    {/* Main Character Info Section */}
    <div class="flex-1">
      <div class="relative flex min-h-32">
        <div class="pr-1">
          {/* Character Basic Info */}
          <div class="min-w-0">
            <h3 class="text-xl font-bold text-primary mb-1">
              <a
                href={`/characters/${character.id}`}
                class={`${styling.accent} hover:underline transition-colors`}
                style={styling.customColor
                  ? `color: ${styling.customColor};`
                  : ""}
              >
                {data.name}
              </a>
            </h3>
            <p class="text-sm text-secondary mb-1">
              {data.subrace ? `${data.subrace} ${data.race}` : data.race}
            </p>
            {
              ((data.classes && data.classes.length > 0) ||
                (data.class && data.class.length > 0)) && (
                <div class="space-y-1">
                  {allClasses.map((classInfo, index) => (
                    <div key={index} class="flex items-center gap-2">
                      <div class="relative flex-shrink-0">
                        <div class="w-8 h-8 rounded-md bg-gradient-to-br from-amber-400 to-amber-600 dark:from-amber-500 dark:to-amber-700 p-1 shadow-sm">
                          <img
                            src={getClassIcon(classInfo.name)}
                            alt={`${classInfo.name} class icon`}
                            class="w-full h-full object-contain filter brightness-0 invert"
                            onerror="this.style.display='none'"
                          />
                        </div>
                      </div>
                      <div class="flex-1 min-w-0">
                        <p class="text-sm text-primary font-medium">
                          {getOrdinalSuffix(classInfo.level)} level{" "}
                          {classInfo.name}
                        </p>
                        {classInfo.subclass && (
                          <p class="text-xs text-tertiary truncate">
                            {classInfo.subclass}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )
            }
          </div>
        </div>
        <div class="ml-5 mt-1.5">
          {/* Ability Scores Section - Left of Card */}
          {
            data.ability_scores && (
              <div class="grid grid-cols-3 gap-1.5 right-0 top-6">
                {Object.entries(data.ability_scores)
                  .filter(([, score]) => score !== undefined)
                  .map(([ability, score]) => {
                    const modifier = getAbilityModifier(score!);
                    const abilityShort = ability.toUpperCase();

                    return (
                      <div class="w-12 h-10 flex flex-col items-center bg-surface-elevated shadow-amber-100 shadow-sm rounded-md">
                        {/* Ability Name */}
                        <div class="text-xs text-tertiary mb-0.5">
                          {abilityShort}
                          {formatModifier(modifier)}
                        </div>

                        {/* Score */}
                        <div class="text-xs font-bold text-primary leading-none">
                          {score}
                        </div>
                      </div>
                    );
                  })}
              </div>
            )
          }

          {/*Roles */}
          <div class="flex items-center gap-2 mt-2">
            {
              data.roles && data.roles.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {data.roles.map((role, index) => (
                    <div class="flex items-center group relative">
                      <img
                        src={getRoleIcon(role)}
                        alt={role}
                        class="w-6 h-6 object-contain"
                        title={role.charAt(0).toUpperCase() + role.slice(1)}
                      />
                      <span class="absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                        {role.charAt(0).toUpperCase() + role.slice(1)}
                      </span>
                    </div>
                  ))}
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
  {/* Combat Stats */}
  <div class="absolute flex w-fit top-36 right-2">
    <div class="grid grid-cols-3 gap-2">
      {
        data.hp && (
          <div class="text-xs font-semibold text-text-tertiary mb-0.5 w-12 h-12 relative">
            <span class="absolute -top-3 left-1/2 transform -translate-x-1/2 text-[10px] font-bold text-[#FF5555] bg-surface-elevated px-2 rounded-t-full">
              HP
            </span>
            <img
              src={hpBadge.src}
              alt="HP Badge"
              class="absolute top-1/2 left-1/2 text-center transform -translate-x-1/2 -translate-y-1/2 w-full h-auto z-10 filter brightness-100 sepia-0 hue-rotate-0 saturate-100 invert-0 opacity-100"
              style="filter: sepia(1) hue-rotate(-50deg) saturate(5) brightness(1);"
            />
            <span class="absolute top-5.5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-md font-bold z-20 text-white">
              {data.hp}
            </span>
          </div>
        )
      }
      {
        data.ac && (
          <div class="text-xs font-semibold text-text-tertiary w-12 h-12 relative">
            <span class="absolute -top-3 left-1/2 transform -translate-x-1/2 text-[10px] font-bold text-[#77AAFF] bg-surface-elevated px-2 rounded-t-full">
              AC
            </span>
            <img
              src={acBadge.src}
              alt="AC Badge"
              class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-auto z-10 filter brightness-100 sepia-0 hue-rotate-0 saturate-100 invert-0 opacity-100"
              style="filter: sepia(1) hue-rotate(-180deg) saturate(5) brightness(1);"
            />
            <span class="absolute top-5.5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-md font-bold z-20 text-white">
              {data.ac}
            </span>
          </div>
        )
      }
      {
        data.mr && (
          <div class="text-xs font-semibold text-text-tertiary w-12 h-12 relative">
            <span class="absolute -top-3 left-1/2 transform -translate-x-1/2 text-[10px] font-bold text-[#bd77ff] bg-surface-elevated px-2 rounded-t-full">
              MR
            </span>
            <img
              src={mrBadge.src}
              alt="MR Badge"
              class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-auto z-10 filter brightness-100 sepia-0 hue-rotate-0 saturate-100 invert-0 opacity-100"
              style="filter: sepia(1) hue-rotate(-150deg) saturate(5) brightness(1);"
            />
            <span class="absolute top-5.5 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-md font-bold z-20 text-white">
              {data.mr}
            </span>
          </div>
        )
      }
    </div>
  </div>
  <div class="mt-10 pl-29 flex flex-col w-fit">
    {
      data.owner && (
        <div class="flex gap-1">
          <span class="text-xs text-text-primary break-words  bg-surface-tertiary p-1 pl-4 rounded">
            Played by <br /> {data.owner}
          </span>
        </div>
      )
    }
    <div class="relative pl-3 pt-2">
      <CharacterHistory character={character} />
    </div>
  </div>
</div>
