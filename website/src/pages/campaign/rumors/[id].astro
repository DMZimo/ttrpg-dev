---
import BaseLayout from "@/layouts/BaseLayout.astro";
import RelatedContent from "@/components/ui/RelatedContent.astro";
import { getCollection, type CollectionEntry, render } from "astro:content";
import { generateBreadcrumbs } from "@/utils/crossLinking";

export async function getStaticPaths() {
  const rumors = await getCollection("rumors");
  return rumors.map((rumor) => ({
    params: { id: rumor.id },
    props: { rumor },
  }));
}

interface Props {
  rumor: CollectionEntry<"rumors">;
}

const { rumor } = Astro.props as Props;
const { Content } = await render(rumor);

const breadcrumbs = generateBreadcrumbs(Astro.url.pathname, rumor.data.title);

const getStatusColor = (status: string) => {
  switch (status) {
    case "active":
      return "text-green-600 bg-green-100 dark:bg-green-900/30";
    case "investigated":
      return "text-blue-600 bg-blue-100 dark:bg-blue-900/30";
    case "resolved":
      return "text-purple-600 bg-purple-100 dark:bg-purple-900/30";
    case "false":
      return "text-red-600 bg-red-100 dark:bg-red-900/30";
    default:
      return "text-gray-600 bg-gray-100 dark:bg-gray-900/30";
  }
};

const getReliabilityColor = (reliability: string) => {
  switch (reliability) {
    case "confirmed":
      return "text-green-700 bg-green-200 dark:bg-green-900/50";
    case "reliable":
      return "text-blue-700 bg-blue-200 dark:bg-blue-900/50";
    case "questionable":
      return "text-yellow-700 bg-yellow-200 dark:bg-yellow-900/50";
    case "unreliable":
      return "text-red-700 bg-red-200 dark:bg-red-900/50";
    default:
      return "text-gray-700 bg-gray-200 dark:bg-gray-900/50";
  }
};

const getUrgencyColor = (urgency: string) => {
  switch (urgency) {
    case "time-sensitive":
      return "text-red-600";
    case "high":
      return "text-orange-600";
    case "medium":
      return "text-yellow-600";
    case "low":
      return "text-green-600";
    default:
      return "text-gray-600";
  }
};

const getDangerColor = (danger: string) => {
  switch (danger) {
    case "deadly":
      return "text-red-600";
    case "high":
      return "text-orange-600";
    case "medium":
      return "text-yellow-600";
    case "low":
      return "text-green-600";
    case "safe":
      return "text-blue-600";
    default:
      return "text-gray-600";
  }
};

const getRewardColor = (reward: string) => {
  switch (reward) {
    case "high":
      return "text-gold-600";
    case "medium":
      return "text-yellow-600";
    case "low":
      return "text-green-600";
    case "none":
      return "text-gray-600";
    default:
      return "text-gray-600";
  }
};
---

<BaseLayout title={rumor.data.title} description={rumor.data.description}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Breadcrumb Navigation -->
    <nav class="flex items-center gap-2 text-sm text-muted mb-6">
      {
        breadcrumbs.map((crumb, index) => (
          <div class="flex items-center gap-2">
            {index > 0 && <span class="text-text-primary/40">‚Ä∫</span>}
            {index === breadcrumbs.length - 1 ? (
              <span class="text-text-primary font-medium">{crumb.name}</span>
            ) : (
              <a
                href={crumb.url}
                class="hover:text-accent-500 transition-colors"
              >
                {crumb.name}
              </a>
            )}
          </div>
        ))
      }
    </nav>

    <!-- Rumor Header -->
    <div
      class="bg-surface-elevated rounded-xl shadow-card border border-primary/20 p-8 mb-8"
    >
      <div class="flex flex-wrap items-start justify-between gap-4 mb-6">
        <div class="flex-1 min-w-0">
          <h1
            class="text-3xl font-bold text-text-primary mb-3 flex items-center gap-3"
          >
            <span class="text-4xl">üëÇ</span>
            {rumor.data.title}
          </h1>
          <p class="text-lg text-secondary leading-relaxed">
            {rumor.data.description}
          </p>
        </div>

        <div class="flex flex-col gap-2">
          <span
            class={`px-3 py-1.5 rounded-full text-sm font-semibold border ${getStatusColor(rumor.data.status)}`}
          >
            {
              rumor.data.status.charAt(0).toUpperCase() +
                rumor.data.status.slice(1)
            }
          </span>
          <span
            class={`px-3 py-1.5 rounded-full text-sm font-semibold ${getReliabilityColor(rumor.data.reliability)}`}
          >
            {
              rumor.data.reliability.charAt(0).toUpperCase() +
                rumor.data.reliability.slice(1)
            }
          </span>
        </div>
      </div>

      <!-- Rumor Details Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          rumor.data.source && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">üë§</span>
              <div>
                <div class="text-sm text-muted">Source</div>
                <div class="font-semibold text-text-primary">
                  {rumor.data.source}
                </div>
              </div>
            </div>
          )
        }

        {
          rumor.data.location && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">üìç</span>
              <div>
                <div class="text-sm text-muted">Location</div>
                <div class="font-semibold text-text-primary">
                  {rumor.data.location}
                </div>
              </div>
            </div>
          )
        }

        {
          rumor.data.urgency && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">‚è∞</span>
              <div>
                <div class="text-sm text-muted">Urgency</div>
                <div
                  class={`font-semibold ${getUrgencyColor(rumor.data.urgency)}`}
                >
                  {rumor.data.urgency.charAt(0).toUpperCase() +
                    rumor.data.urgency.slice(1)}
                </div>
              </div>
            </div>
          )
        }

        {
          rumor.data.danger_level && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">‚ö†Ô∏è</span>
              <div>
                <div class="text-sm text-muted">Danger Level</div>
                <div
                  class={`font-semibold ${getDangerColor(rumor.data.danger_level)}`}
                >
                  {rumor.data.danger_level.charAt(0).toUpperCase() +
                    rumor.data.danger_level.slice(1)}
                </div>
              </div>
            </div>
          )
        }

        {
          rumor.data.reward_potential && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">üí∞</span>
              <div>
                <div class="text-sm text-muted">Reward Potential</div>
                <div
                  class={`font-semibold ${getRewardColor(rumor.data.reward_potential)}`}
                >
                  {rumor.data.reward_potential.charAt(0).toUpperCase() +
                    rumor.data.reward_potential.slice(1)}
                </div>
              </div>
            </div>
          )
        }

        {
          rumor.data.heard_in_session && (
            <div class="flex items-center gap-3">
              <span class="text-2xl">üìÖ</span>
              <div>
                <div class="text-sm text-muted">First Heard</div>
                <div class="font-semibold text-text-primary">
                  Session {rumor.data.heard_in_session}
                </div>
              </div>
            </div>
          )
        }
      </div>

      <!-- Investigation Notes -->
      {
        rumor.data.investigation_notes && (
          <div class="mt-6 pt-6 border-t border-primary/20">
            <h3 class="text-lg font-bold text-text-primary mb-3">
              Investigation Notes
            </h3>
            <p class="text-secondary italic">
              {rumor.data.investigation_notes}
            </p>
          </div>
        )
      }

      <!-- Related Quest -->
      {
        rumor.data.related_quest && (
          <div class="mt-6 pt-6 border-t border-primary/20">
            <h3 class="text-lg font-bold text-text-primary mb-3">
              Related Quest
            </h3>
            <div class="p-4 bg-surface-secondary rounded-lg border border-primary/10">
              <span class="text-accent-500 font-medium">
                {rumor.data.related_quest}
              </span>
            </div>
          </div>
        )
      }

      <!-- Tags -->
      {
        rumor.data.tags && rumor.data.tags.length > 0 && (
          <div class="mt-6 pt-6 border-t border-primary/20">
            <h3 class="text-lg font-bold text-text-primary mb-3">Tags</h3>
            <div class="flex flex-wrap gap-2">
              {rumor.data.tags.map((tag: string) => (
                <span class="text-xs px-3 py-1 bg-accent-100 dark:bg-accent-900/30 text-accent-700 dark:text-accent-300 rounded-full border">
                  {tag}
                </span>
              ))}
            </div>
          </div>
        )
      }
    </div>

    <!-- Rumor Content -->
    <div
      class="bg-surface-elevated rounded-xl shadow-card border border-primary/20 p-8 mb-8"
    >
      <div class="prose prose-slate dark:prose-invert max-w-none">
        <Content />
      </div>
    </div>

    <!-- Related Content -->
    <RelatedContent
      currentPageId={rumor.id}
      currentTitle={rumor.data.title}
      contentType="rumor"
      content={rumor.body}
      relatedCharacters={rumor.data.related_characters}
      relatedLocations={rumor.data.location ? [rumor.data.location] : []}
      tags={rumor.data.tags}
    />
  </div>
</BaseLayout>

<style>
  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply text-text-primary;
  }

  .prose p {
    @apply text-secondary;
  }

  .prose strong {
    @apply text-text-primary font-semibold;
  }

  .prose ul li {
    @apply text-secondary;
  }

  .prose ul li::marker {
    @apply text-accent-500;
  }
</style>
