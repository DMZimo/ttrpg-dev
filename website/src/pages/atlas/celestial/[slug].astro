---
import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { SITE_TITLE } from "../../../consts";

export const getStaticPaths: GetStaticPaths = async () => {
  const celestialBodies = await getCollection("celestial");
  return celestialBodies.map((body) => ({
    params: { slug: body.id },
    props: { body },
  }));
};

type Props = {
  body: CollectionEntry<"celestial">;
};

const { body } = Astro.props as Props;
const { data } = body;
const { Content } = await body.render();

// Get related bodies (satellites, companions, etc.)
const allBodies = await getCollection("celestial");
const satellites = data.satellites
  ? allBodies.filter((b) => data.satellites!.includes(b.id))
  : [];
const companions = data.companions
  ? allBodies.filter((b) => data.companions!.includes(b.id))
  : [];
const primary = data.orbital?.primary
  ? allBodies.find((b) => b.id === data.orbital.primary)
  : null;
---

<BaseLayout
  title={`${data.name} - Atlas - ${SITE_TITLE}`}
  description={`Detailed information about ${data.name}, a ${data.subtype.replace("-", " ")} in Realmspace.`}
  class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800"
>
  <!-- Navigation Header -->
  <nav
    class="bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 sticky top-0 z-40"
  >
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center space-x-4">
          <a
            href="/atlas"
            class="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100 transition-colors"
          >
            Atlas
          </a>
          <span class="text-slate-400">/</span>
          <a
            href="/atlas/celestial"
            class="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100 transition-colors"
          >
            Celestial
          </a>
          <span class="text-slate-400">/</span>
          <span class="text-slate-900 dark:text-slate-100 font-medium"
            >{data.name}</span
          >
        </div>

        <div class="flex items-center space-x-4">
          <a
            href="/atlas/celestial"
            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition-colors"
          >
            <span class="mr-2">üåå</span>
            3D Map
          </a>
        </div>
      </div>
    </div>
  </nav>

  <article class="max-w-4xl mx-auto px-4 py-8">
    <!-- Header -->
    <header class="mb-8">
      <div class="flex items-start justify-between mb-4">
        <div>
          <h1
            class="text-4xl font-bold text-slate-900 dark:text-slate-100 mb-2"
          >
            {data.name}
          </h1>
          <p class="text-xl text-slate-600 dark:text-slate-400 capitalize">
            {data.subtype.replace("-", " ")} ‚Ä¢ {data.type}
          </p>
        </div>
        <div class="text-6xl">
          {
            data.type === "star"
              ? "‚≠ê"
              : data.type === "planet"
                ? "ü™ê"
                : data.type === "moon"
                  ? "üåô"
                  : "‚òÑÔ∏è"
          }
        </div>
      </div>

      {
        data.aliases && data.aliases.length > 0 && (
          <div class="mb-4">
            <span class="text-sm text-slate-500 dark:text-slate-400">
              Also known as:
            </span>
            <div class="flex flex-wrap gap-2 mt-1">
              {data.aliases.map((alias: string) => (
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-200">
                  {alias}
                </span>
              ))}
            </div>
          </div>
        )
      }
    </header>

    <!-- Quick Stats -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <!-- Physical Stats -->
      <div
        class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700"
      >
        <h3
          class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4"
        >
          Physical Properties
        </h3>
        <div class="space-y-3 text-sm">
          {
            data.physical?.diameter_miles && (
              <div class="flex justify-between">
                <span class="text-slate-600 dark:text-slate-400">
                  Diameter:
                </span>
                <span class="font-medium text-slate-900 dark:text-slate-100">
                  {data.physical.diameter_miles.toLocaleString()} miles
                </span>
              </div>
            )
          }
          {
            data.physical?.gravity_earth && (
              <div class="flex justify-between">
                <span class="text-slate-600 dark:text-slate-400">Gravity:</span>
                <span class="font-medium text-slate-900 dark:text-slate-100">
                  {data.physical.gravity_earth}√ó Earth
                </span>
              </div>
            )
          }
          {
            data.physical?.atmosphere && (
              <div class="flex justify-between">
                <span class="text-slate-600 dark:text-slate-400">
                  Atmosphere:
                </span>
                <span class="font-medium text-slate-900 dark:text-slate-100 capitalize">
                  {data.physical.atmosphere}
                </span>
              </div>
            )
          }
          {
            data.physical?.temperature && (
              <div class="flex justify-between">
                <span class="text-slate-600 dark:text-slate-400">
                  Temperature:
                </span>
                <span class="font-medium text-slate-900 dark:text-slate-100 capitalize">
                  {data.physical.temperature}
                </span>
              </div>
            )
          }
        </div>
      </div>

      <!-- Orbital Stats -->
      {
        data.orbital && (
          <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              Orbital Data
            </h3>
            <div class="space-y-3 text-sm">
              {primary && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Orbits:
                  </span>
                  <a
                    href={`/atlas/celestial/${primary.id}`}
                    class="font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200"
                  >
                    {primary.data.name}
                  </a>
                </div>
              )}
              {data.orbital.distance_miles && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Distance:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.orbital.distance_miles.toLocaleString()} miles
                  </span>
                </div>
              )}
              {data.orbital.period_days && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Period:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.orbital.period_days < 1
                      ? `${(data.orbital.period_days * 24).toFixed(1)} hours`
                      : data.orbital.period_days < 30
                        ? `${data.orbital.period_days.toFixed(1)} days`
                        : `${(data.orbital.period_days / 365.25).toFixed(1)} years`}
                  </span>
                </div>
              )}
              {data.orbital.rotation_hours && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Day Length:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.orbital.rotation_hours} hours
                  </span>
                </div>
              )}
            </div>
          </div>
        )
      }

      <!-- Spelljammer Classification -->
      {
        data.spelljammer && (
          <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              Spelljammer Data
            </h3>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between">
                <span class="text-slate-600 dark:text-slate-400">
                  Size Code:
                </span>
                <span class="font-medium text-slate-900 dark:text-slate-100">
                  {data.spelljammer.size}
                </span>
              </div>
              {data.spelljammer.body && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Body Type:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100 capitalize">
                    {data.spelljammer.body}
                  </span>
                </div>
              )}
              {data.spelljammer.shape && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">Shape:</span>
                  <span class="font-medium text-slate-900 dark:text-slate-100 capitalize">
                    {data.spelljammer.shape}
                  </span>
                </div>
              )}
              {data.spelljammer.code && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Full Code:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.spelljammer.code}
                  </span>
                </div>
              )}
            </div>
          </div>
        )
      }
    </div>

    <!-- Relationships -->
    {
      (satellites.length > 0 || companions.length > 0) && (
        <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700 mb-8">
          <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
            Related Bodies
          </h3>

          {satellites.length > 0 && (
            <div class="mb-4">
              <h4 class="text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                Satellites:
              </h4>
              <div class="flex flex-wrap gap-2">
                {satellites.map((satellite: any) => (
                  <a
                    href={`/atlas/celestial/${satellite.id}`}
                    class="inline-flex items-center px-3 py-1 rounded-md text-sm bg-blue-100 text-blue-800 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200 dark:hover:bg-blue-800 transition-colors"
                  >
                    üåô {satellite.data.name}
                  </a>
                ))}
              </div>
            </div>
          )}

          {companions.length > 0 && (
            <div>
              <h4 class="text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                Companions:
              </h4>
              <div class="flex flex-wrap gap-2">
                {companions.map((companion: any) => (
                  <a
                    href={`/atlas/celestial/${companion.id}`}
                    class="inline-flex items-center px-3 py-1 rounded-md text-sm bg-purple-100 text-purple-800 hover:bg-purple-200 dark:bg-purple-900 dark:text-purple-200 dark:hover:bg-purple-800 transition-colors"
                  >
                    ‚òÑÔ∏è {companion.data.name}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      )
    }

    <!-- Main Content -->
    <div
      class="bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700 overflow-hidden"
    >
      <div class="px-6 py-8 prose prose-slate dark:prose-invert max-w-none">
        <Content />
      </div>
    </div>

    <!-- Navigation Footer -->
    <div
      class="mt-8 flex justify-between items-center py-6 border-t border-slate-200 dark:border-slate-700"
    >
      <a
        href="/atlas/celestial"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-slate-700 bg-slate-200 hover:bg-slate-300 dark:text-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 transition-colors"
      >
        <svg
          class="mr-2 -ml-1 w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Celestial Map
      </a>

      <a
        href="/atlas"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-amber-700 bg-amber-100 hover:bg-amber-200 dark:text-amber-200 dark:bg-amber-900 dark:hover:bg-amber-800 transition-colors"
      >
        üìö Atlas Contents
      </a>
    </div>
  </article>
</BaseLayout>
