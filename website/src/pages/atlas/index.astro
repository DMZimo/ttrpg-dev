---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import AtlasViewer from "@/components/atlas/AtlasViewer.tsx";

// Import available maps
import dessarinValleyMap from "@/assets/maps/dessarin-valley-map.webp";
import redLarchAreaMap from "@/assets/maps/red-larch-area-map.webp";
import redLarchMap from "@/assets/maps/red-larch-map.webp";
import swordCoastMap from "@/assets/maps/sword-coast-map.webp";
import swordCoastNorthMap from "@/assets/maps/sword-coast-north-map.webp";
import faerunMap from "@/assets/maps/faerun-map.webp";

// Get all atlas collections
const [continents, regions, settlements] = await Promise.all([
  getCollection("continents"),
  getCollection("regions"),
  getCollection("settlements"),
]);

// Create map definitions with metadata
const availableMaps = [
  {
    id: "faerun",
    name: "Faerûn Continent",
    description: "The main continent of the Forgotten Realms.",
    image: faerunMap,
    type: "continent",
    scale: "continental",
    bounds: {
      north: 45,
      south: -45,
      east: 69.66, // 5564/3600 * 45 to maintain aspect ratio
      west: -69.66,
    },
    dimensions: {
      width: 4763,
      height: 3185,
    },
  },
  {
    id: "sword-coast",
    name: "Sword Coast",
    description:
      "The western coast of Faerûn, home to many great cities and adventures",
    image: swordCoastMap,
    type: "continent",
    scale: "regional",
    bounds: {
      north: 45,
      south: -45,
      east: 69.66, // 5564/3600 * 45 to maintain aspect ratio
      west: -69.66,
    },
    dimensions: {
      width: 5564,
      height: 3600,
    },
  },
  {
    id: "sword-coast-north",
    name: "Northen Sword Coast Area",
    description:
      "The northern part of the Sword Coast, between Neverwinter and Lelion",
    image: swordCoastNorthMap,
    type: "region",
    scale: "regional",
    parentMap: "sword-coast",
    bounds: {
      north: 45,
      south: -16.33, // 2648/3625 * 90 - 45 to maintain aspect ratio
      east: 32.88, // 2648/3625 * 45 to maintain aspect ratio
      west: -32.88,
    },
    dimensions: {
      width: 2648,
      height: 3625,
    },
  },
  {
    id: "dessarin-valley",
    name: "Dessarin Valley",
    description:
      "A fertile valley in the North, site of our current adventures",
    image: dessarinValleyMap,
    type: "region",
    scale: "regional",
    parentMap: "sword-coast",
    bounds: {
      north: 45,
      south: -25.44, // 3152/4000 * 90 - 45 to maintain aspect ratio
      east: 35.46, // 3152/4000 * 45 to maintain aspect ratio
      west: -35.46,
    },
    dimensions: {
      width: 3152,
      height: 4000,
    },
  },
  {
    id: "red-larch-area",
    name: "Red Larch Area",
    description:
      "The surrounding countryside and local settlements near Red Larch",
    image: redLarchAreaMap,
    type: "area",
    scale: "local",
    parentMap: "dessarin-valley",
    bounds: {
      north: 32.42, // 1806/2500 * 45 to maintain aspect ratio
      south: -32.42,
      east: 45, // 2500/1806 * 32.42 but capped at reasonable longitude
      west: -45,
    },
    dimensions: {
      width: 2500,
      height: 1806,
    },
  },
  {
    id: "red-larch",
    name: "Red Larch",
    description: "Detailed map of the town of Red Larch and its districts",
    image: redLarchMap,
    type: "settlement",
    scale: "detailed",
    parentMap: "red-larch-area",
    bounds: {
      north: 31.15, // 2700/3900 * 45 to maintain aspect ratio
      south: -31.15,
      east: 45, // 3900/2700 * 31.15 but capped at reasonable longitude
      west: -45,
    },
    dimensions: {
      width: 3900,
      height: 2700,
    },
  },
];

// Process locations data for the atlas viewer
const processedLocations = [];

// Helper function to get coordinates for a location on a specific map
function getLocationCoordinates(locationData, mapId) {
  // Check map_assignments first for specific coordinates on this map
  if (locationData.map_assignments) {
    const assignment = locationData.map_assignments.find(
      (a) => a.map_id === mapId
    );
    if (assignment) {
      return assignment.coordinates;
    }
  }

  // Fall back to default coordinates if no specific assignment
  if (locationData.coordinates) {
    return locationData.coordinates;
  }

  // Default fallback coordinates
  return { lat: 0, lng: 0 };
}

// Helper function to determine which maps a location should appear on
function getLocationMaps(locationData, category) {
  const maps = [];

  // Add explicit map assignments
  if (locationData.map_assignments) {
    maps.push(...locationData.map_assignments.map((a) => a.map_id));
  }

  // Add logical map assignments based on hierarchy and category
  if (category === "continent") {
    maps.push("faerun"); // Continents appear on the main map
  } else if (category === "region") {
    maps.push("faerun", "sword-coast");
    if (locationData.parent_continent === "faerun") {
      maps.push("dessarin-valley");
    }
  } else if (category === "settlement") {
    maps.push("faerun", "sword-coast", "dessarin-valley");
    if (locationData.parent_region === "dessarin-valley") {
      maps.push("red-larch-area");
    }
    if (locationData.name === "Red Larch") {
      maps.push("red-larch");
    }
  }

  return [...new Set(maps)]; // Remove duplicates
}

// Process continents
for (const continent of continents) {
  const maps = getLocationMaps(continent.data, "continent");

  for (const mapId of maps) {
    processedLocations.push({
      id: `${continent.id}-${mapId}`,
      name: continent.data.name,
      type: "continent",
      category: "continent",
      description: continent.body,
      data: continent.data,
      coordinates: getLocationCoordinates(continent.data, mapId),
      mapId: mapId,
    });
  }
}

// Process regions
for (const region of regions) {
  const maps = getLocationMaps(region.data, "region");

  for (const mapId of maps) {
    processedLocations.push({
      id: `${region.id}-${mapId}`,
      name: region.data.name,
      type: region.data.type,
      category: "region",
      description: region.body,
      data: region.data,
      coordinates: getLocationCoordinates(region.data, mapId),
      mapId: mapId,
    });
  }
}

// Process settlements
for (const settlement of settlements) {
  const maps = getLocationMaps(settlement.data, "settlement");

  for (const mapId of maps) {
    processedLocations.push({
      id: `${settlement.id}-${mapId}`,
      name: settlement.data.name,
      type: settlement.data.type,
      category: "settlement",
      description: settlement.body,
      data: settlement.data,
      coordinates: getLocationCoordinates(settlement.data, mapId),
      mapId: mapId,
    });
  }
}

// Get campaign statistics
const totalLocations = processedLocations.length;
const locationsByType = processedLocations.reduce(
  (acc, location) => {
    acc[location.category] = (acc[location.category] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

const pageTitle = "World Atlas";
const pageDescription =
  "Explore the world of our campaign through detailed maps and location guides.";
---

<BaseLayout title={pageTitle} description={pageDescription} class="!pt-0">
  <AtlasViewer
    maps={availableMaps}
    locations={processedLocations}
    defaultMapId="red-larch-area"
    client:load
  />
</BaseLayout>
