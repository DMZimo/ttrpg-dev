---
import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { SITE_TITLE } from "../../../consts";

export const getStaticPaths: GetStaticPaths = async () => {
  const continents = await getCollection("continents");
  return continents.map((continent) => ({
    params: { slug: continent.id },
    props: { continent },
  }));
};

type Props = {
  continent: CollectionEntry<"continents">;
};

const { continent } = Astro.props as Props;
const { data } = continent;
const { Content } = await continent.render();

// Get related regions and settlements
const allRegions = await getCollection("regions");
const allSettlements = await getCollection("settlements");

const relatedRegions = data.regions
  ? allRegions.filter((r) => data.regions!.includes(r.id))
  : allRegions.filter((r) => r.data.parent_continent === continent.id);

const relatedSettlements = allSettlements.filter(
  (s) => s.data.parent_continent === continent.id
);
---

<BaseLayout
  title={`${data.name} - Atlas - ${SITE_TITLE}`}
  description={`Explore ${data.name}, a ${data.type} covering ${data.geographic?.area_sq_miles?.toLocaleString() || "vast"} square miles.`}
  class="min-h-screen bg-gradient-to-br from-green-50 to-blue-100 dark:from-slate-900 dark:to-slate-800"
>
  <!-- Navigation Header -->
  <nav
    class="bg-white dark:bg-slate-800 border-b border-slate-200 dark:border-slate-700 sticky top-0 z-40"
  >
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center space-x-4">
          <a
            href="/atlas"
            class="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100 transition-colors"
          >
            Atlas
          </a>
          <span class="text-slate-400">/</span>
          <a
            href="/atlas#continents"
            class="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100 transition-colors"
          >
            Continents
          </a>
          <span class="text-slate-400">/</span>
          <span class="text-slate-900 dark:text-slate-100 font-medium"
            >{data.name}</span
          >
        </div>

        <div class="text-sm text-slate-600 dark:text-slate-400">
          Chapter II: Continents
        </div>
      </div>
    </div>
  </nav>

  <article class="max-w-6xl mx-auto px-4 py-8">
    <!-- Header -->
    <header class="mb-8">
      <div class="flex items-start justify-between mb-4">
        <div>
          <h1
            class="text-4xl font-bold text-slate-900 dark:text-slate-100 mb-2"
          >
            {data.name}
          </h1>
          <p class="text-xl text-slate-600 dark:text-slate-400 capitalize">
            {data.type}
            {
              data.geographic?.area_sq_miles && (
                <span class="text-slate-500">
                  {" "}
                  ‚Ä¢ {data.geographic.area_sq_miles.toLocaleString()} sq mi
                </span>
              )
            }
          </p>
        </div>
        <div class="text-6xl">üèîÔ∏è</div>
      </div>

      {
        data.aliases && data.aliases.length > 0 && (
          <div class="mb-4">
            <span class="text-sm text-slate-500 dark:text-slate-400">
              Also known as:
            </span>
            <div class="flex flex-wrap gap-2 mt-1">
              {data.aliases.map((alias: string) => (
                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-slate-100 text-slate-800 dark:bg-slate-700 dark:text-slate-200">
                  {alias}
                </span>
              ))}
            </div>
          </div>
        )
      }
    </header>

    <!-- Quick Stats -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <!-- Geography -->
      {
        data.geographic && (
          <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              Geography
            </h3>
            <div class="space-y-3 text-sm">
              {data.geographic.area_sq_miles && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">Area:</span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.geographic.area_sq_miles.toLocaleString()} sq mi
                  </span>
                </div>
              )}
              {data.geographic.coastline_miles && (
                <div class="flex justify-between">
                  <span class="text-slate-600 dark:text-slate-400">
                    Coastline:
                  </span>
                  <span class="font-medium text-slate-900 dark:text-slate-100">
                    {data.geographic.coastline_miles.toLocaleString()} miles
                  </span>
                </div>
              )}
              {data.geographic.climate_zones &&
                data.geographic.climate_zones.length > 0 && (
                  <div>
                    <span class="text-slate-600 dark:text-slate-400 block mb-1">
                      Climate Zones:
                    </span>
                    <div class="flex flex-wrap gap-1">
                      {data.geographic.climate_zones.map((zone: string) => (
                        <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 capitalize">
                          {zone}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
            </div>
          </div>
        )
      }

      <!-- Political -->
      {
        data.political && (
          <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              Political
            </h3>
            <div class="space-y-3 text-sm">
              {data.political.major_nations &&
                data.political.major_nations.length > 0 && (
                  <div>
                    <span class="text-slate-600 dark:text-slate-400 block mb-1">
                      Major Nations:
                    </span>
                    <div class="space-y-1">
                      {data.political.major_nations
                        .slice(0, 5)
                        .map((nation: string) => (
                          <div class="text-slate-900 dark:text-slate-100">
                            {nation}
                          </div>
                        ))}
                      {data.political.major_nations.length > 5 && (
                        <div class="text-slate-500 text-xs">
                          ...and {data.political.major_nations.length - 5} more
                        </div>
                      )}
                    </div>
                  </div>
                )}
              {data.political.languages &&
                data.political.languages.length > 0 && (
                  <div>
                    <span class="text-slate-600 dark:text-slate-400 block mb-1">
                      Languages:
                    </span>
                    <div class="flex flex-wrap gap-1">
                      {data.political.languages
                        .slice(0, 4)
                        .map((lang: string) => (
                          <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                            {lang}
                          </span>
                        ))}
                    </div>
                  </div>
                )}
            </div>
          </div>
        )
      }

      <!-- Cultural -->
      {
        data.cultural && (
          <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
              Cultural
            </h3>
            <div class="space-y-3 text-sm">
              {data.cultural.dominant_races &&
                data.cultural.dominant_races.length > 0 && (
                  <div>
                    <span class="text-slate-600 dark:text-slate-400 block mb-1">
                      Dominant Races:
                    </span>
                    <div class="flex flex-wrap gap-1">
                      {data.cultural.dominant_races
                        .slice(0, 4)
                        .map((race: string) => (
                          <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                            {race}
                          </span>
                        ))}
                    </div>
                  </div>
                )}
              {data.cultural.major_religions &&
                data.cultural.major_religions.length > 0 && (
                  <div>
                    <span class="text-slate-600 dark:text-slate-400 block mb-1">
                      Major Religions:
                    </span>
                    <div class="space-y-1">
                      {data.cultural.major_religions
                        .slice(0, 3)
                        .map((religion: string) => (
                          <div class="text-slate-900 dark:text-slate-100">
                            {religion}
                          </div>
                        ))}
                    </div>
                  </div>
                )}
            </div>
          </div>
        )
      }
    </div>

    <!-- Related Locations -->
    {
      (relatedRegions.length > 0 || relatedSettlements.length > 0) && (
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {relatedRegions.length > 0 && (
            <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
              <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                Regions
              </h3>
              <div class="space-y-3">
                {relatedRegions.map((region: any) => (
                  <a
                    href={`/atlas/regions/${region.id}`}
                    class="block p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors border border-slate-100 dark:border-slate-600"
                  >
                    <div class="flex items-center space-x-3">
                      <span class="text-lg">
                        {region.data.type === "sea"
                          ? "üèñÔ∏è"
                          : region.data.type === "forest"
                            ? "üå≤"
                            : region.data.type === "valley"
                              ? "üèîÔ∏è"
                              : region.data.type === "kingdom"
                                ? "üëë"
                                : "üó∫Ô∏è"}
                      </span>
                      <div>
                        <div class="font-medium text-slate-900 dark:text-slate-100">
                          {region.data.name}
                        </div>
                        <div class="text-sm text-slate-500 dark:text-slate-400 capitalize">
                          {region.data.type}
                        </div>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )}

          {relatedSettlements.length > 0 && (
            <div class="bg-white dark:bg-slate-800 rounded-lg p-6 shadow-lg border border-slate-200 dark:border-slate-700">
              <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
                Major Settlements
              </h3>
              <div class="space-y-3">
                {relatedSettlements.slice(0, 8).map((settlement: any) => (
                  <a
                    href={`/atlas/settlements/${settlement.id}`}
                    class="block p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-700 transition-colors border border-slate-100 dark:border-slate-600"
                  >
                    <div class="flex items-center space-x-3">
                      <span class="text-lg">
                        {settlement.data.type === "metropolis"
                          ? "üèôÔ∏è"
                          : settlement.data.type === "city"
                            ? "üåÜ"
                            : settlement.data.type === "town"
                              ? "üèòÔ∏è"
                              : settlement.data.type === "village"
                                ? "üè†"
                                : "üèõÔ∏è"}
                      </span>
                      <div>
                        <div class="font-medium text-slate-900 dark:text-slate-100">
                          {settlement.data.name}
                        </div>
                        <div class="text-sm text-slate-500 dark:text-slate-400">
                          {settlement.data.demographics?.population
                            ? `Pop. ${settlement.data.demographics.population.toLocaleString()}`
                            : settlement.data.type}
                        </div>
                      </div>
                    </div>
                  </a>
                ))}
                {relatedSettlements.length > 8 && (
                  <div class="text-center text-sm text-slate-500 dark:text-slate-400 pt-2">
                    ...and {relatedSettlements.length - 8} more settlements
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      )
    }

    <!-- Main Content -->
    <div
      class="bg-white dark:bg-slate-800 rounded-lg shadow-lg border border-slate-200 dark:border-slate-700 overflow-hidden"
    >
      <div class="px-6 py-8 prose prose-slate dark:prose-invert max-w-none">
        <Content />
      </div>
    </div>

    <!-- Navigation Footer -->
    <div
      class="mt-8 flex justify-between items-center py-6 border-t border-slate-200 dark:border-slate-700"
    >
      <a
        href="/atlas"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-slate-700 bg-slate-200 hover:bg-slate-300 dark:text-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 transition-colors"
      >
        <svg
          class="mr-2 -ml-1 w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Atlas
      </a>

      <div class="flex items-center space-x-4">
        {
          relatedRegions.length > 0 && (
            <a
              href={`/atlas/regions/${relatedRegions[0].id}`}
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-green-700 bg-green-100 hover:bg-green-200 dark:text-green-200 dark:bg-green-900 dark:hover:bg-green-800 transition-colors"
            >
              üó∫Ô∏è Explore {relatedRegions[0].data.name}
            </a>
          )
        }
      </div>
    </div>
  </article>
</BaseLayout>
