---
import { getCollection, type CollectionEntry, render } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
// Import only what we need from character components
import CharacterHeader from "@/components/characters/slug/CharacterHeader.astro";
import CharacterSkills from "@/components/characters/slug/CharacterSkills.astro";
import CharacterPhysical from "@/components/characters/slug/CharacterPhysical.astro";
import { formatAbilityModifier } from "@/utils/characterUtils";
import "@/styles/characters.css";

export async function getStaticPaths() {
  const characters = await getCollection("characters");
  return characters.map((character) => ({
    params: { slug: character.id },
    props: { character },
  }));
}

type Props = {
  character: CollectionEntry<"characters">;
};

const { character } = Astro.props;
const { Content } = await render(character);
const characterColor = character.data.color;
---

<BaseLayout
  title={`${character.data.name} - Dessarin Valley Chronicles`}
  description={character.data.description ||
    `Character profile for ${character.data.name}`}
>
  <div class="flex pt-11">
    <!-- Left Sidebar - Navigation and Character Stats -->
    <div class="flex-col bg-surface-secondary pl-2">
      <div class="mb-43">
        <CharacterHeader character={character} />
      </div>
      <div class="flex flex-col gap-2 px-2">
        <CharacterPhysical character={character} />
        <CharacterSkills character={character} />
      </div>
    </div>
    <!-- Character Page Content - Full viewport layout -->
    <div class="bg-surface-primary pl-10 pr-4 pt-2">
      {character.body && <Content />}
      {
        !character.body && (
          <div class="text-center text-secondary py-12">
            <p>No biography available for this character.</p>
          </div>
        )
      }
    </div>
  </div>

  <!-- Dynamic adjustment for announcement banner -->
  <script>
    // Adjust layout when announcement banner is present
    function adjustForAnnouncement() {
      const announcementBanner = document.querySelector(
        ".announcement-banner"
      ) as HTMLElement;
      const characterLayout = document.querySelector(
        ".character-layout-fullscreen"
      ) as HTMLElement;
      const sidebar = document.querySelector(
        ".character-layout-fullscreen > div:first-child"
      ) as HTMLElement;

      if (announcementBanner && characterLayout && sidebar) {
        const announcementHeight = announcementBanner.offsetHeight;
        const totalTopOffset = 64 + announcementHeight;

        characterLayout.style.paddingTop = `${totalTopOffset}px`;
        sidebar.style.top = `${totalTopOffset}px`;
        sidebar.style.height = `calc(100vh - ${totalTopOffset}px)`;
      }
    }

    // Run on load and when announcement banner changes
    document.addEventListener("DOMContentLoaded", adjustForAnnouncement);
    window.addEventListener("resize", adjustForAnnouncement);
  </script>
</BaseLayout>
