---
import { getCollection, type CollectionEntry, render } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
// Import only what we need from character components
import { CharacterHeader } from "@/components/characters/slug/CharacterHeader";
import { CharacterSidebar } from "@/components/characters/slug/CharacterSidebar";
import "@/styles/characters.css";

export async function getStaticPaths() {
  const characters = await getCollection("characters");
  return characters.map((character) => ({
    params: { slug: character.id },
    props: { character },
  }));
}

type Props = {
  character: CollectionEntry<"characters">;
};

const { character } = Astro.props;
const { Content } = await render(character);
const characterColor = character.data.color;
---

<BaseLayout
  title={`${character.data.name} - Dessarin Valley Chronicles`}
  description={character.data.description ||
    `Character profile for ${character.data.name}`}
  class=""
>
  <!-- Character-specific styling -->
  <style define:vars={{ characterColor }}>
    .character-accent {
      --character-color: var(--characterColor, rgb(var(--primary-500)));
    }
  </style>

  <!-- Main Character Layout -->
  <div class="relative h-screen pt-[64px]">
    <!-- Character Navigation -->

    <!-- Left Sidebar - Navigation and Character Stats -->
    <div class="w-[32rem] h-full overflow-y-auto pt-2 pl-5 z-40">
      <div class="flex items-center px-1 z-[100]">
        <CharacterHeader character={character} client:load />
      </div>
      <div>
        <!-- Basic Stats -->
        <div class="mb-4">
          <h4 class="text-sm font-semibold text-text-primary mb-2">Details</h4>
          <div class="flex flex-col gap-1.5">
            {
              character.data.background && (
                <div class="flex flex-col gap-0.5">
                  <span class="text-xs font-semibold text-text-secondary">
                    Background:
                  </span>
                  <span class="text-xs text-text-primary break-words">
                    {character.data.background}
                  </span>
                </div>
              )
            }

            {
              character.data.birthplace && (
                <div class="flex flex-col gap-0.5">
                  <span class="text-xs font-semibold text-text-secondary">
                    Birthplace:
                  </span>
                  <span class="text-xs text-text-primary break-words">
                    {character.data.birthplace}
                  </span>
                </div>
              )
            }

            {
              character.data.culture && (
                <div class="flex flex-col gap-0.5">
                  <span class="text-xs font-semibold text-text-secondary">
                    Culture:
                  </span>
                  <span class="text-xs text-text-primary break-words">
                    {character.data.culture}
                  </span>
                </div>
              )
            }

            {
              character.data.size && (
                <div class="flex flex-col gap-0.5">
                  <span class="text-xs font-semibold text-text-secondary">
                    Size:
                  </span>
                  <span class="text-xs text-text-primary break-words">
                    {character.data.size}
                  </span>
                </div>
              )
            }

            {
              character.data.languages &&
                character.data.languages.length > 0 && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Languages:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.languages
                        .map((lang) =>
                          typeof lang === "string" ? lang : lang.name
                        )
                        .join(", ")}
                    </span>
                  </div>
                )
            }
          </div>
        </div>

        <!-- Physical Description -->
        {
          character.data.physical_description && (
            <div class="mb-4">
              <h4 class="text-sm font-semibold text-text-primary mb-2">
                Physical Description
              </h4>
              <div class="flex flex-col gap-1.5">
                {character.data.physical_description.gender && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Gender:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.gender}
                    </span>
                  </div>
                )}
                {character.data.physical_description.hair && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Hair:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.hair}
                    </span>
                  </div>
                )}
                {character.data.physical_description.eyes && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Eyes:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.eyes}
                    </span>
                  </div>
                )}
                {character.data.physical_description.skin && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Skin:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.skin}
                    </span>
                  </div>
                )}
                {character.data.physical_description.build && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Build:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.build}
                    </span>
                  </div>
                )}
                {character.data.physical_description.height && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Height:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.height
                        .map((h) => `${h.feet}'${h.inches}"`)
                        .join(", ")}
                    </span>
                  </div>
                )}
                {character.data.physical_description.weight && (
                  <div class="flex flex-col gap-0.5">
                    <span class="text-xs font-semibold text-text-secondary">
                      Weight:
                    </span>
                    <span class="text-xs text-text-primary break-words">
                      {character.data.physical_description.weight}
                    </span>
                  </div>
                )}
              </div>
            </div>
          )
        }
      </div>
    </div>

    <!-- Character Page Content - Full viewport layout -->
    <div
      class="w-full m-0 p-0 bg-surface-secondary z-30 relative character-accent"
    >
      <!-- Main Character Content - Biography Only -->
      <div class="character-main-content-scrollable">
        {
          character.body && (
            <div class="character-content">
              <div class="prose prose-lg max-w-none">
                <Content />
              </div>
            </div>
          )
        }

        <!-- Fallback if no biography content -->
        {
          !character.body && (
            <div class="character-content">
              <div class="text-center text-secondary py-12">
                <p>No biography available for this character.</p>
              </div>
            </div>
          )
        }
      </div>
    </div>
  </div>

  <!-- Dynamic adjustment for announcement banner -->
  <script>
    // Adjust layout when announcement banner is present
    function adjustForAnnouncement() {
      const announcementBanner = document.querySelector(
        ".announcement-banner"
      ) as HTMLElement;
      const characterLayout = document.querySelector(
        ".character-layout-fullscreen"
      ) as HTMLElement;
      const sidebar = document.querySelector(
        ".character-layout-fullscreen > div:first-child"
      ) as HTMLElement;

      if (announcementBanner && characterLayout && sidebar) {
        const announcementHeight = announcementBanner.offsetHeight;
        const totalTopOffset = 64 + announcementHeight;

        characterLayout.style.paddingTop = `${totalTopOffset}px`;
        sidebar.style.top = `${totalTopOffset}px`;
        sidebar.style.height = `calc(100vh - ${totalTopOffset}px)`;
      }
    }

    // Run on load and when announcement banner changes
    document.addEventListener("DOMContentLoaded", adjustForAnnouncement);
    window.addEventListener("resize", adjustForAnnouncement);
  </script>
</BaseLayout>
