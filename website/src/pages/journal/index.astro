---
import BaseHead from "@/components/layout/BaseHead.astro";
import Header from "@/components/layout/Header.astro";
import Footer from "@/components/layout/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "@/consts";
import { getCollection } from "astro:content";
import FormattedDate from "@/components/layout/FormattedDate.astro";
import { Image } from "astro:assets";

const entries = (await getCollection("journal")).sort((a, b) => {
  // Use session_date if available, otherwise fall back to pubDate
  const dateA = a.data.session_date || a.data.pubDate;
  const dateB = b.data.session_date || b.data.pubDate;

  // Handle cases where dates might be undefined
  if (!dateA && !dateB) return 0;
  if (!dateA) return 1;
  if (!dateB) return -1;

  return dateB.valueOf() - dateA.valueOf();
});
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title="Game Sessions - TTRPG Journal"
      description="Browse all tabletop RPG game sessions and campaign notes"
    />
    <style>
      main {
        width: 960px;
      }
      section h1 {
        font-size: 2.5rem;
        margin: 2rem 0 0.5rem 0;
        color: rgb(var(--black));
        text-align: center;
      }
      section > p {
        text-align: center;
        color: rgb(var(--gray));
        margin-bottom: 2rem;
        font-size: 1.1rem;
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      ul li {
        width: calc(50% - 1rem);
      }
      ul li * {
        text-decoration: none;
        transition: 0.2s ease;
      }
      ul li:first-child {
        width: 100%;
        margin-bottom: 1rem;
        text-align: center;
      }
      ul li:first-child img {
        width: 100%;
      }
      ul li:first-child .title {
        font-size: 2.369rem;
      }
      ul li img {
        margin-bottom: 0.5rem;
        border-radius: 12px;
      }
      ul li a {
        display: block;
      }
      .title {
        margin: 0;
        color: rgb(var(--black));
        line-height: 1;
      }
      .date {
        margin: 0;
        color: rgb(var(--gray));
      }
      .session-number {
        margin: 0.25rem 0;
        color: rgb(var(--accent));
        font-weight: 600;
        font-size: 0.9rem;
      }
      .tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
      }
      .tag {
        background: rgb(var(--accent-light));
        color: rgb(var(--accent-dark));
        padding: 0.15rem 0.5rem;
        border-radius: 1rem;
        font-size: 0.7rem;
        font-weight: 500;
      }
      ul li a:hover h4,
      ul li a:hover .date,
      ul li a:hover .session-number {
        color: rgb(var(--accent));
      }
      ul a:hover img {
        box-shadow: var(--box-shadow);
      }
      @media (max-width: 720px) {
        ul {
          gap: 0.5em;
        }
        ul li {
          width: 100%;
          text-align: center;
        }
        ul li:first-child {
          margin-bottom: 0;
        }
        ul li:first-child .title {
          font-size: 1.563em;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <section>
        <h1>Game Sessions</h1>
        <p>Browse all tabletop RPG sessions and campaign notes</p>
        <ul>
          {
            entries.map((entry) => {
              // Use session_title if available, otherwise fall back to title or generate from session_number
              const displayTitle =
                entry.data.session_title ||
                entry.data.title ||
                (entry.data.session_number
                  ? `Session ${entry.data.session_number}`
                  : "Untitled Session");

              // Use session_date if available, otherwise fall back to pubDate
              const displayDate = entry.data.session_date || entry.data.pubDate;

              return (
                <li>
                  <a href={`/sessions/${entry.id}/`}>
                    {entry.data.heroImage && (
                      <Image
                        width={720}
                        height={360}
                        src={entry.data.heroImage}
                        alt=""
                      />
                    )}
                    <h4 class="title">{displayTitle}</h4>
                    {entry.data.session_number && (
                      <p class="session-number">
                        Session {entry.data.session_number}
                      </p>
                    )}
                    {displayDate && (
                      <p class="date">
                        <FormattedDate date={displayDate} />
                      </p>
                    )}
                    {entry.data.tags && entry.data.tags.length > 0 && (
                      <div class="tags">
                        {entry.data.tags.slice(0, 3).map((tag: string) => (
                          <span class="tag">{tag}</span>
                        ))}
                      </div>
                    )}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>
