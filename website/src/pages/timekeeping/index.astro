---
import BaseLayout from "@/layouts/BaseLayout.astro";
import Calendar from "../../components/calendar/Calendar.tsx";
import CurrentDateWidget from "../../components/calendar/CurrentDateWidget.astro";
import HolidaysList from "../../components/calendar/HolidaysList.astro";
import CalendarLegend from "../../components/calendar/CalendarLegend.astro";

// Import campaign configuration
import { CAMPAIGN_DATE, CAMPAIGN_SETTINGS } from "../../consts";
import { getCollection } from "astro:content";

import {
  createHarptosDate,
  createHarptosTime,
  formatHarptosDate,
  getSeasonEmoji,
  getSeasonTextColor,
  getMoonPhase,
  HARPTOS_MONTHS,
  getCalendarViewModes,
  generateCalendarData,
} from "../../utils/fantasyCalendar";

// Get URL parameters for navigation and view options
const url = new URL(Astro.request.url);
const yearParam = url.searchParams.get("year");
const monthParam = url.searchParams.get("month");
const viewModeParam = url.searchParams.get("view");
const holidaySeasonParam = url.searchParams.get("holidaySeason");
const filterParam = url.searchParams.get("filter");
const compactParam = url.searchParams.get("compact");
const showResourcesParam = url.searchParams.get("resources");

// Use campaign date as the current date
const currentDate = createHarptosDate(CAMPAIGN_DATE.year, CAMPAIGN_DATE.month, CAMPAIGN_DATE.day);
const currentTime = createHarptosTime(CAMPAIGN_DATE.hour, CAMPAIGN_DATE.minute);

// Display parameters with fallbacks to campaign date or current date
const displayYear = yearParam ? parseInt(yearParam) : currentDate.year;
const displayMonth = monthParam ? parseInt(monthParam) : currentDate.month;
const viewMode = viewModeParam || CAMPAIGN_SETTINGS.defaultViewMode;
const validMonth = Math.max(1, Math.min(12, displayMonth));
const validYear = Math.max(1, displayYear);
const displayDate = createHarptosDate(validYear, validMonth, 1);

const currentMoonPhase = getMoonPhase(currentDate);
const currentSeasonEmoji = getSeasonEmoji(currentDate.season);
const currentSeasonText = getSeasonTextColor(currentDate.season);

const isCompactView = compactParam === "true";
const showResources = showResourcesParam === "true";
const holidaySeasonFilter =
  (holidaySeasonParam as
    | "winter"
    | "spring"
    | "summer"
    | "autumn"
    | undefined) || "all";

// Generate view-specific data
const availableViewModes = getCalendarViewModes();
const calendarData = generateCalendarData(validYear, viewMode === "year" ? undefined : validMonth);

// Get timekeeping content for resources section
const timekeepingContent = await getCollection("timekeeping");
const holidays = timekeepingContent.filter((item) => item.data.type === "holiday" || item.data.type === "seasonal");
const months = timekeepingContent
  .filter((item) => item.data.type === "month")
  .sort((a, b) => (a.data.monthNumber || 0) - (b.data.monthNumber || 0));
const seasons = timekeepingContent.filter((item) => item.data.type === "season");
const celestial = timekeepingContent.filter(
  (item) => item.data.type === "celestial-body" || item.data.type === "celestial" || item.data.type === "moon"
);
const calendarSystems = timekeepingContent.filter((item) => item.data.type === "calendar-system");
---

<BaseLayout
  title="Calendar of Harptos - Timekeeping Portal"
  description="Central timekeeping portal for the Faer√ªnian calendar - explore months, holidays, celestial events, and seasons"
>
  <!-- Account for fixed header height (64px + announcement height) -->
  <div class="calendar-page w-full min-h-screen">
    <!-- Page Header -->
    <div class="page-header text-center mb-4 px-4">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        üìÖ Calendar of Harptos
      </h1>
      <p class="text-lg text-gray-600 dark:text-gray-400 mb-6">
        Central timekeeping portal for the campaign world
      </p>
    </div>

    <!-- Main Calendar Layout -->
    <div class={`calendar-layout px-2 ${isCompactView ? 'compact-layout' : 'full-layout'}`}>
      
      <!-- Left Sidebar (Calendar Info) -->
      <div class="calendar-sidebar space-y-6">
        <CurrentDateWidget currentDate={currentDate} currentTime={currentTime} />
        
        {!isCompactView && (
          <CalendarLegend />
        )}
      </div>

      <!-- Main Calendar Content -->
      <div class="calendar-main space-y-6">
        <Calendar 
          year={validYear} 
          month={validMonth} 
          currentDate={currentDate}
          client:load
        />
      </div>

      <!-- Right Sidebar (Holidays & Events) -->
      <div class="calendar-events space-y-6">
        <HolidaysList 
          filterBySeason={holidaySeasonFilter} 
          maxHolidays={isCompactView ? 4 : 8} 
        />
        
        {isCompactView && (
          <CalendarLegend />
        )}
      </div>
    </div>

    <!-- Resources Section (toggleable) -->
    {showResources && (
      <div class="resources-section mt-8 pt-6 border-t border-gray-200 dark:border-gray-700 px-2">
        <div class="section-header text-center mb-8">
          <h2 class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-4">
            ‚è∞ Timekeeping Resources
          </h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">
            Comprehensive guide to the campaign world's calendar, holidays, and celestial events
          </p>
        </div>

        <div class="content-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <!-- Calendar Systems -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üìä Calendar Systems
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
              Learn about the different timekeeping methods used across the world.
            </p>
            <div class="space-y-2">
              {calendarSystems.map((system) => (
                <a
                  href={`/timekeeping/${system.id}`}
                  class="block p-3 bg-purple-50 dark:bg-purple-900/20 rounded border hover:bg-purple-100 dark:hover:bg-purple-900/30 transition-colors"
                >
                  <div class="font-medium text-purple-800 dark:text-purple-200 text-sm">
                    {system.data.title || system.data.name}
                  </div>
                  {system.data.description && (
                    <div class="text-xs text-purple-600 dark:text-purple-400 mt-1">
                      {system.data.description.slice(0, 80)}...
                    </div>
                  )}
                </a>
              ))}
            </div>
          </div>

          <!-- Months -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üìÖ Months
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
              Explore each month of the year and its characteristics.
            </p>
            <div class="space-y-2 max-h-64 overflow-y-auto">
              {months.map((month) => (
                <a
                  href={`/timekeeping/${month.id}`}
                  class="block p-3 bg-blue-50 dark:bg-blue-900/20 rounded border hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
                >
                  <div class="font-medium text-blue-800 dark:text-blue-200 text-sm">
                    {month.data.monthNumber}. {month.data.title || month.data.name}
                  </div>
                  <div class="text-xs text-blue-600 dark:text-blue-400">
                    {month.data.commonName} ‚Ä¢ {month.data.days} days ‚Ä¢ {month.data.season}
                  </div>
                </a>
              ))}
            </div>
          </div>

          <!-- Holidays -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üéâ Holidays & Festivals
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
              Discover the celebrations and observances throughout the year.
            </p>
            <div class="space-y-2 max-h-64 overflow-y-auto">
              {holidays.slice(0, 8).map((holiday) => (
                <a
                  href={`/timekeeping/${holiday.id}`}
                  class="block p-3 bg-amber-50 dark:bg-amber-900/20 rounded border hover:bg-amber-100 dark:hover:bg-amber-900/30 transition-colors"
                >
                  <div class="font-medium text-amber-800 dark:text-amber-200 text-sm">
                    {holiday.data.title || holiday.data.name}
                  </div>
                  <div class="text-xs text-amber-600 dark:text-amber-400">
                    {holiday.data.observance} observance ‚Ä¢ {holiday.data.duration || 1} day{(holiday.data.duration || 1) > 1 ? 's' : ''}
                  </div>
                </a>
              ))}
            </div>
          </div>

          <!-- Seasons -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üå± Seasons
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
              Understand the seasonal cycles and their effects.
            </p>
            <div class="space-y-2">
              {seasons.map((season) => (
                <a
                  href={`/timekeeping/${season.id}`}
                  class="block p-3 bg-green-50 dark:bg-green-900/20 rounded border hover:bg-green-100 dark:hover:bg-green-900/30 transition-colors"
                >
                  <div class="font-medium text-green-800 dark:text-green-200 text-sm">
                    {season.data.title || season.data.name}
                  </div>
                  {season.data.description && (
                    <div class="text-xs text-green-600 dark:text-green-400 mt-1">
                      {season.data.description.slice(0, 60)}...
                    </div>
                  )}
                </a>
              ))}
            </div>
          </div>

          <!-- Celestial Bodies -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üåô Celestial Bodies
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
              Learn about the moons, stars, and other celestial phenomena.
            </p>
            <div class="space-y-2">
              {celestial.map((body) => (
                <a
                  href={`/timekeeping/${body.id}`}
                  class="block p-3 bg-indigo-50 dark:bg-indigo-900/20 rounded border hover:bg-indigo-100 dark:hover:bg-indigo-900/30 transition-colors"
                >
                  <div class="font-medium text-indigo-800 dark:text-indigo-200 text-sm">
                    {body.data.title || body.data.name}
                  </div>
                  <div class="text-xs text-indigo-600 dark:text-indigo-400">
                    {body.data.celestialType || body.data.type} ‚Ä¢ {body.data.cycle?.period ? `${body.data.cycle.period} day cycle` : 'Variable cycle'}
                  </div>
                </a>
              ))}
            </div>
          </div>

          <!-- Quick Navigation -->
          <div class="content-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-gray-200 dark:border-gray-700">
            <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 flex items-center gap-2">
              üöÄ Quick Actions
            </h3>
            <div class="space-y-3">
              <a
                href="/journal"
                class="block w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition-colors text-center text-sm"
              >
                üìñ Session Journal
              </a>
              <a
                href="/characters"
                class="block w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors text-center text-sm"
              >
                üë• Characters
              </a>
              <a
                href="/atlas"
                class="block w-full bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded transition-colors text-center text-sm"
              >
                ÔøΩÔ∏è World Atlas
              </a>
              <a
                href="/campaign-stats"
                class="block w-full bg-amber-600 hover:bg-amber-700 text-white px-4 py-2 rounded transition-colors text-center text-sm"
              >
                üìä Campaign Stats
              </a>
            </div>
          </div>
        </div>

        <!-- Statistics -->
        <div class="statistics mt-6 bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
          <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4 text-center">
            üìà Timekeeping Statistics
          </h3>
          <div class="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
            <div>
              <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{calendarSystems.length}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Calendar Systems</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-green-600 dark:text-green-400">{months.length}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Months</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-amber-600 dark:text-amber-400">{holidays.length}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Holidays</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">{seasons.length}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Seasons</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-indigo-600 dark:text-indigo-400">{celestial.length}</div>
              <div class="text-sm text-gray-600 dark:text-gray-400">Celestial Bodies</div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</BaseLayout>
<style>
  .calendar-layout {
    display: grid;
    gap: 1rem;
    margin-top: 1rem;
    width: 100%;
    max-width: 100vw;
  }

  .full-layout {
    grid-template-columns: 280px 1fr 280px;
    grid-template-areas: "sidebar main events";
  }

  .compact-layout {
    grid-template-columns: 240px 1fr 240px;
    grid-template-areas: "sidebar main events";
  }

  .calendar-sidebar {
    grid-area: sidebar;
  }

  .calendar-main {
    grid-area: main;
    min-width: 0; /* Prevent grid blowout */
  }

  .calendar-events {
    grid-area: events;
  }

  /* Ensure full width on larger screens */
  .calendar-page {
    max-width: 100vw;
    width: 100%;
    padding-top: 64px; /* Account for fixed header */
  }

  @media (max-width: 1024px) {
    .full-layout {
      grid-template-columns: 1fr;
      grid-template-areas: 
        "main"
        "sidebar"
        "events";
    }
    
    .compact-layout {
      grid-template-columns: 1fr 280px;
      grid-template-areas: 
        "main events"
        "sidebar sidebar";
    }
  }

  @media (max-width: 768px) {
    .calendar-layout {
      grid-template-columns: 1fr;
      grid-template-areas: 
        "main"
        "sidebar"
        "events";
      gap: 0.5rem;
    }
    
    .calendar-page {
      padding-top: 64px; /* Maintain header clearance on mobile */
    }
  }

  .calendar-page {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Ensure content doesn't get cut off by fixed header */
  .page-header {
    padding-top: 1rem;
  }
</style>

<script>
  // Global calendar state for filtering and display
  let activeFilters = new Set<string>();
  let viewMode = new URLSearchParams(window.location.search).get('view') || 'month';
  
  function changeViewMode(mode: string) {
    const url = new URL(window.location.href);
    url.searchParams.set('view', mode);
    window.location.href = url.toString();
  }
  
  function toggleResources() {
    const url = new URL(window.location.href);
    const current = url.searchParams.get('resources') === 'true';
    
    if (current) {
      url.searchParams.delete('resources');
    } else {
      url.searchParams.set('resources', 'true');
    }
    
    window.location.href = url.toString();
  }
  
  function toggleCompactMode() {
    const url = new URL(window.location.href);
    const current = url.searchParams.get('compact') === 'true';
    
    if (current) {
      url.searchParams.delete('compact');
    } else {
      url.searchParams.set('compact', 'true');
    }
    
    window.location.href = url.toString();
  }
  
  // Filter functionality (read-only display filtering)
  function toggleFilter(filterType: string) {
    if (activeFilters.has(filterType)) {
      activeFilters.delete(filterType);
    } else {
      activeFilters.add(filterType);
    }
    applyDisplayFilters();
  }
  
  function applyDisplayFilters() {
    const elements = document.querySelectorAll('[data-filter]');
    elements.forEach(element => {
      const filters = (element as HTMLElement).dataset.filter?.split(',') || [];
      const isVisible = activeFilters.size === 0 || filters.some(filter => activeFilters.has(filter));
      
      if (isVisible) {
        element.classList.remove('filtered-out');
      } else {
        element.classList.add('filtered-out');
      }
    });
  }
  
  // Enhanced navigation handlers
  document.addEventListener("DOMContentLoaded", function () {
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      if (e.target && ['INPUT', 'TEXTAREA'].includes((e.target as HTMLElement).tagName)) return;
      
      switch(e.key) {
        case 'r':
        case 'R':
          toggleResources();
          break;
        case 'c':
        case 'C':
          toggleCompactMode();
          break;
        case 'ArrowLeft':
          // Navigate to previous month
          const prevBtn = document.querySelector('a[aria-label="Previous month"]') as HTMLAnchorElement;
          if (prevBtn) prevBtn.click();
          break;
        case 'ArrowRight':
          // Navigate to next month
          const nextBtn = document.querySelector('a[aria-label="Next month"]') as HTMLAnchorElement;
          if (nextBtn) nextBtn.click();
          break;
        case 'Home':
          // Go to current month
          const todayBtn = document.querySelector('button[aria-label="Go to current month"]') as HTMLButtonElement;
          if (todayBtn) todayBtn.click();
          break;
      }
    });
  });
  
  function showDateInformation(dateStr: string) {
    // Enhanced date information display
    console.log('Date selected:', dateStr);
  }
  
  // Make functions globally available
  (window as any).changeViewMode = changeViewMode;
  (window as any).toggleResources = toggleResources;
  (window as any).toggleCompactMode = toggleCompactMode;
  (window as any).toggleFilter = toggleFilter;
</script>
